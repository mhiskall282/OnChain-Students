{"version":3,"file":"index.es.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.org\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1120,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1121,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n    reject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1118,\n    },\n    autoReject: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1119,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n\nexport const TVF_METHODS = {\n  eth_sendTransaction: {\n    key: \"\",\n  },\n  eth_sendRawTransaction: {\n    key: \"\",\n  },\n  wallet_sendCalls: {\n    key: \"\",\n  },\n\n  solana_signTransaction: {\n    key: \"signature\",\n  },\n  solana_signAllTransactions: {\n    key: \"transactions\",\n  },\n  solana_signAndSendTransaction: {\n    key: \"signature\",\n  },\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\n  \"wc_sessionPropose\",\n  \"wc_sessionRequest\",\n  \"wc_authRequest\",\n  \"wc_sessionAuthenticate\",\n];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","/* eslint-disable no-console */\nimport {\n  EVENT_CLIENT_AUTHENTICATE_ERRORS,\n  EVENT_CLIENT_AUTHENTICATE_TRACES,\n  EVENT_CLIENT_PAIRING_ERRORS,\n  EVENT_CLIENT_PAIRING_TRACES,\n  EVENT_CLIENT_SESSION_ERRORS,\n  EVENT_CLIENT_SESSION_TRACES,\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  TRANSPORT_TYPES,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n  EventClientTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  TYPE_2,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n  getLinkModeURL,\n  BASE64,\n  BASE64URL,\n  getSearchParamFromURL,\n  isReactNative,\n  isTestRun,\n  isValidArray,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n  TVF_METHODS,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n  private relayMessageCache: RelayerTypes.MessageEvent[] = [];\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      await this.registerLinkModeListeners();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        this.client.logger.warn(\n          \"connect() with existing pairing topic is deprecated and will be removed in the next major release.\",\n        );\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      pairingTopic: topic,\n      ...(sessionProperties && { sessionProperties }),\n    };\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n    this.events.once<\"session_connect\">(\n      engineEvent(\"session_connect\"),\n      async ({ error, session }) => {\n        if (error) reject(error);\n        else if (session) {\n          session.self.publicKey = publicKey;\n          const completeSession = {\n            ...session,\n            pairingTopic: proposal.pairingTopic,\n            requiredNamespaces: proposal.requiredNamespaces,\n            optionalNamespaces: proposal.optionalNamespaces,\n            transportType: TRANSPORT_TYPES.relay,\n          };\n          await this.client.session.set(session.topic, completeSession);\n          await this.setExpiry(session.topic, session.expiry);\n          if (topic) {\n            await this.client.core.pairing.updateMetadata({\n              topic,\n              metadata: session.peer.metadata,\n            });\n          }\n          this.cleanupDuplicatePairings(completeSession);\n          resolve(completeSession);\n        }\n      },\n    );\n    const id = await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n    });\n    await this.setProposal(id, { id, ...proposal });\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    const configEvent = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: params?.id?.toString(),\n        trace: [EVENT_CLIENT_SESSION_TRACES.session_approve_started],\n      },\n    });\n    try {\n      this.isInitialized();\n      await this.confirmOnlineStateOrThrow();\n    } catch (error) {\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.no_internet_connection);\n      throw error;\n    }\n    try {\n      await this.isValidProposalId(params?.id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${params?.id}) failed`);\n      configEvent.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_not_found);\n      throw error;\n    }\n\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      configEvent.setError(\n        EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure,\n      );\n      throw error;\n    }\n\n    const { id, relayProtocol, namespaces, sessionProperties, sessionConfig } = params;\n\n    const proposal = this.client.proposal.get(id);\n\n    this.client.core.eventClient.deleteEvent({ eventId: configEvent.eventId });\n\n    const { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n\n    let event = this.client.core.eventClient?.getEvent({\n      topic: pairingTopic,\n    }) as EventClientTypes.Event;\n    if (!event) {\n      event = this.client.core.eventClient?.createEvent({\n        type: EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n        properties: {\n          topic: pairingTopic,\n          trace: [\n            EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n            EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success,\n          ],\n        },\n      });\n    }\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    const transportType = TRANSPORT_TYPES.relay;\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n    try {\n      await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n    } catch (error) {\n      event.setError(EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure);\n      throw error;\n    }\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n      transportType: TRANSPORT_TYPES.relay,\n    };\n    await this.client.session.set(sessionTopic, session);\n\n    event.addTrace(EVENT_CLIENT_SESSION_TRACES.store_session);\n\n    try {\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_settle);\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success);\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.publishing_session_approve);\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      }).catch((error) => {\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure);\n        throw error;\n      });\n\n      event.addTrace(EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () => Promise.resolve(this.client.session.get(sessionTopic)),\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.reject,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n\n    if (session?.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    const protocolMethod = \"wc_sessionRequest\";\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (appLink) {\n      await this.sendRequest({\n        clientRpcId,\n        relayRpcId,\n        topic,\n        method: protocolMethod,\n        params: {\n          request: {\n            ...request,\n            expiryTimestamp: calcExpiry(expiry),\n          },\n          chainId,\n        },\n        expiry,\n        throwOnFailedPublish: true,\n        appLink,\n      }).catch((error) => reject(error));\n\n      this.client.events.emit(\"session_request_sent\", {\n        topic,\n        request,\n        chainId,\n        id: clientRpcId,\n      });\n      const result = await done();\n      return result;\n    }\n\n    const protocolRequestParams: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"] = {\n      request: {\n        ...request,\n        expiryTimestamp: calcExpiry(expiry),\n      },\n      chainId,\n    };\n    const shouldSetTVF = this.shouldSetTVF(protocolMethod, protocolRequestParams);\n\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: protocolMethod,\n          params: protocolRequestParams,\n          expiry,\n          throwOnFailedPublish: true,\n          ...(shouldSetTVF && {\n            tvf: this.getTVFParams(clientRpcId, protocolRequestParams),\n          }),\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = (await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          )) as string;\n          await handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    const session = this.client.session.get(topic);\n\n    if (session.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const appLink = this.getAppLinkIfEnabled(session.peer.metadata, session.transportType);\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({\n        id,\n        topic,\n        result: response.result,\n        throwOnFailedPublish: true,\n        appLink,\n      });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error, appLink });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.client.logger.warn(\n        \"ping() on pairing topic is deprecated and will be removed in the next major release.\",\n      );\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const clientRpcId = payloadId();\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n      clientRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    this.isInitialized();\n    await this.confirmOnlineStateOrThrow();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params, walletUniversalLink) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const isLinkMode =\n      walletUniversalLink &&\n      this.client.core.linkModeSupportedApps.includes(walletUniversalLink) &&\n      this.client.metadata.redirect?.linkMode;\n\n    const transportType: RelayerTypes.TransportType = isLinkMode\n      ? TRANSPORT_TYPES.link_mode\n      : TRANSPORT_TYPES.relay;\n\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const {\n      chains,\n      statement = \"\",\n      uri,\n      domain,\n      nonce,\n      type,\n      exp,\n      nbf,\n      methods = [],\n      expiry,\n    } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n      transportType,\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic, { transportType });\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    // Ensure the expiry is greater than the minimum required for the request - currently 1h\n    const authRequestExpiry =\n      expiry && expiry > ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl\n        ? expiry\n        : ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl;\n\n    const request: AuthTypes.SessionAuthenticateRequestParams = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp: calcExpiry(authRequestExpiry),\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      pairingTopic,\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp: calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl),\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(authRequestExpiry, \"Request expired\");\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        session.self.publicKey = publicKey;\n        await this.client.session.set(session.topic, session);\n        await this.setExpiry(session.topic, session.expiry);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: session.peer.metadata,\n          });\n        }\n        const sessionObject = this.client.session.get(session.topic);\n        await this.deleteProposal(fallbackId);\n        resolve({\n          session: sessionObject,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      // delete this auth request on response\n      // we're using payload from the wallet to establish the session so we don't need to keep this around\n      await this.deletePendingAuthRequest(id, { message: \"fulfilled\", code: 0 });\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n        return reject(payload.error.message);\n      }\n      // delete fallback proposal on successful authenticate as the proposal will not be responded to\n      await this.deleteProposal(fallbackId);\n      // cleanup listener for fallback response\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n          transportType,\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n        await this.client.session.set(sessionTopic, session);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: responder.metadata,\n          });\n        }\n\n        session = this.client.session.get(sessionTopic);\n      }\n\n      if (\n        this.client.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.linkMode &&\n        responder.metadata.redirect?.universal &&\n        walletUniversalLink\n      ) {\n        // save wallet link in array of apps that support linkMode\n        this.client.core.addLinkModeSupportedApp(responder.metadata.redirect.universal);\n\n        this.client.session.update(sessionTopic, {\n          transportType: TRANSPORT_TYPES.link_mode,\n        });\n      }\n\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // set the ids for both requests\n    const id = payloadId();\n    const fallbackId = payloadId();\n    // subscribe to response events\n    this.events.once<\"session_connect\">(engineEvent(\"session_connect\"), onSessionConnect);\n    this.events.once(engineEvent(\"session_request\", id), onAuthenticate);\n\n    let linkModeURL;\n    try {\n      if (isLinkMode) {\n        const payload = formatJsonRpcRequest(\"wc_sessionAuthenticate\", request, id);\n        this.client.core.history.set(pairingTopic, payload);\n        const message = await this.client.core.crypto.encode(\"\", payload, {\n          type: TYPE_2,\n          encoding: BASE64URL,\n        });\n        linkModeURL = getLinkModeURL(walletUniversalLink, pairingTopic, message);\n      } else {\n        // send both (main & fallback) requests\n        await Promise.all([\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionAuthenticate\",\n            params: request,\n            expiry: params.expiry,\n            throwOnFailedPublish: true,\n            clientRpcId: id,\n          }),\n          this.sendRequest({\n            topic: pairingTopic,\n            method: \"wc_sessionPropose\",\n            params: proposal,\n            expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n            throwOnFailedPublish: true,\n            clientRpcId: fallbackId,\n          }),\n        ]);\n      }\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(fallbackId, { id: fallbackId, ...proposal });\n    await this.setAuthRequest(id, {\n      request: {\n        ...request,\n        verifyContext: {} as any,\n      },\n      pairingTopic,\n      transportType,\n    });\n\n    return {\n      uri: linkModeURL ?? connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const event = this.client.core.eventClient.createEvent({\n      properties: {\n        topic: id.toString(),\n        trace: [EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started],\n      },\n    });\n\n    try {\n      this.isInitialized();\n    } catch (error) {\n      event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection);\n      throw error;\n    }\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found,\n      );\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const transportType = pendingRequest.transportType || TRANSPORT_TYPES.relay;\n    if (transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        event.setError(EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: pendingRequest.pairingTopic,\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n        transportType,\n      };\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n\n      try {\n        await this.client.core.relayer.subscribe(sessionTopic, { transportType });\n      } catch (error) {\n        event.setError(\n          EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure,\n        );\n        throw error;\n      }\n\n      event.addTrace(\n        EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success,\n      );\n\n      await this.client.session.set(sessionTopic, session);\n\n      event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session);\n\n      await this.client.core.pairing.updateMetadata({\n        topic: pendingRequest.pairingTopic,\n        metadata: pendingRequest.requester.metadata,\n      });\n    }\n\n    event.addTrace(EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n\n    try {\n      await this.sendResult<\"wc_sessionAuthenticate\">({\n        topic: responseTopic,\n        id,\n        result: {\n          cacaos: auths,\n          responder: {\n            publicKey: senderPublicKey,\n            metadata: this.client.metadata,\n          },\n        },\n        encodeOpts,\n        throwOnFailedPublish: true,\n        appLink: this.getAppLinkIfEnabled(pendingRequest.requester.metadata, transportType),\n      });\n    } catch (error) {\n      event.setError(\n        EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure,\n      );\n      throw error;\n    }\n\n    await this.client.auth.requests.delete(id, { message: \"fulfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    this.client.core.eventClient.deleteEvent({ eventId: event.eventId });\n\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    if (pendingRequest.transportType === TRANSPORT_TYPES.relay) {\n      await this.confirmOnlineStateOrThrow();\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n      rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.reject,\n      appLink: this.getAppLinkIfEnabled(\n        pendingRequest.requester.metadata,\n        pendingRequest.transportType,\n      ),\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  public processRelayMessageCache: IEngine[\"processRelayMessageCache\"] = () => {\n    // process the relay messages cache in the next tick to allow event listeners to be registered by the implementing app\n    setTimeout(async () => {\n      if (this.relayMessageCache.length === 0) return;\n      while (this.relayMessageCache.length > 0) {\n        try {\n          const message = this.relayMessageCache.shift();\n          if (message) {\n            await this.onRelayMessage(message);\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      }\n    }, 50);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    // reset the queue state back to idle if a request for the deleted session is still in the queue\n    if (topic === this.sessionRequestQueue.queue[0]?.topic) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n    }\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    if (expirerHasDeleted) {\n      try {\n        const proposal = this.client.proposal.get(id);\n        const event = this.client.core.eventClient.getEvent({ topic: proposal.pairingTopic });\n        event?.setError(EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n      } catch (error) {}\n    }\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private deletePendingAuthRequest: EnginePrivate[\"deletePendingAuthRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.auth.requests.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (!this.client.session.keys.includes(topic)) return;\n    this.client.core.expirer.set(topic, expiry);\n    await this.client.session.update(topic, { expiry });\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n    await this.client.proposal.set(id, proposal);\n  };\n\n  private setAuthRequest: EnginePrivate[\"setAuthRequest\"] = async (id, params) => {\n    const { request, pairingTopic, transportType = TRANSPORT_TYPES.relay } = params;\n    this.client.core.expirer.set(id, request.expiryTimestamp);\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp: request.expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: request.verifyContext,\n      transportType,\n    });\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    this.client.core.expirer.set(id, expiry);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const {\n      topic,\n      method,\n      params,\n      expiry,\n      relayRpcId,\n      clientRpcId,\n      throwOnFailedPublish,\n      appLink,\n      tvf,\n    } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n\n    let message: string;\n    const isLinkMode = !!appLink;\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, { encoding });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n\n    let attestation: string | undefined;\n    if (METHODS_TO_VERIFY.includes(method)) {\n      const decryptedId = hashMessage(JSON.stringify(payload));\n      const id = hashMessage(message);\n      attestation = await this.client.core.verify.register({ id, decryptedId });\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    opts.attestation = attestation;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[method].req;\n      if (expiry) opts.ttl = expiry;\n      if (relayRpcId) opts.id = relayRpcId;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: payload.id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts, appLink } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    let tvf;\n    try {\n      record = await this.client.core.history.get(topic, id);\n      const request = record.request;\n      try {\n        if (this.shouldSetTVF(request.method as JsonRpcTypes.WcMethod, request.params)) {\n          tvf = this.getTVFParams(id, request.params, result);\n        }\n      } catch (error) {\n        this.client.logger.warn(`sendResult() -> getTVFParams() failed`, error);\n      }\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = ENGINE_RPC_OPTS[record.request.method].res;\n\n      opts.tvf = {\n        ...tvf,\n        correlationId: id,\n      };\n\n      if (throwOnFailedPublish) {\n        opts.internal = {\n          ...opts.internal,\n          throwOnFailedPublish: true,\n        };\n        await this.client.core.relayer.publish(topic, message, opts);\n      } else {\n        this.client.core.relayer\n          .publish(topic, message, opts)\n          .catch((error) => this.client.logger.error(error));\n      }\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts, rpcOpts, appLink } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    const isLinkMode = appLink && typeof (global as any)?.Linking !== \"undefined\";\n    try {\n      const encoding = isLinkMode ? BASE64URL : BASE64;\n      message = await this.client.core.crypto.encode(topic, payload, {\n        ...(encodeOpts || {}),\n        encoding,\n      });\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n\n    if (isLinkMode) {\n      const redirectURL = getLinkModeURL(appLink, topic, message);\n      await (global as any).Linking.openURL(redirectURL, this.client.name);\n    } else {\n      const opts = rpcOpts || ENGINE_RPC_OPTS[record.request.method].res;\n      // await is intentionally omitted to speed up performance\n      this.client.core.relayer.publish(topic, message, opts);\n    }\n\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n  }\n\n  private async confirmOnlineStateOrThrow() {\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(RELAYER_EVENTS.message, (event: RelayerTypes.MessageEvent) => {\n      // capture any messages that arrive before the client is initialized so we can process them after initialization is complete\n      if (!this.initialized || this.relayMessageCache.length > 0) {\n        this.relayMessageCache.push(event);\n      } else {\n        this.onRelayMessage(event);\n      }\n    });\n  }\n\n  private async onRelayMessage(event: RelayerTypes.MessageEvent) {\n    const { topic, message, attestation, transportType } = event;\n\n    // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n    const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n      ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n      : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n    const payload = await this.client.core.crypto.decode(topic, message, {\n      receiverPublicKey: publicKey,\n      encoding: transportType === TRANSPORT_TYPES.link_mode ? BASE64URL : BASE64,\n    });\n    try {\n      if (isJsonRpcRequest(payload)) {\n        this.client.core.history.set(topic, payload);\n        this.onRelayEventRequest({\n          topic,\n          payload,\n          attestation,\n          transportType,\n          encryptedId: hashMessage(message),\n        });\n      } else if (isJsonRpcResponse(payload)) {\n        await this.client.core.history.resolve(payload);\n        await this.onRelayEventResponse({ topic, payload, transportType });\n        this.client.core.history.delete(topic, payload.id);\n      } else {\n        this.onRelayEventUnknownPayload({ topic, payload, transportType });\n      }\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        await this.processRequest(request);\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    const { topic, payload, attestation, transportType, encryptedId } = event;\n\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return await this.onSessionProposeRequest({ topic, payload, attestation, encryptedId });\n      case \"wc_sessionSettle\":\n        return await this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return await this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return await this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return await this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return await this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return await this.onSessionRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      case \"wc_sessionEvent\":\n        return await this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return await this.onSessionAuthenticateRequest({\n          topic,\n          payload,\n          attestation,\n          encryptedId,\n          transportType,\n        });\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload, transportType } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload, transportType);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId } = args;\n    const { params, id } = payload;\n    try {\n      const event = this.client.core.eventClient.getEvent({ topic });\n\n      if (this.client.events.listenerCount(\"session_proposal\") === 0) {\n        console.warn(\"No listener for session_proposal event\");\n        event?.setError(EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found);\n      }\n\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: proposal.proposer.metadata,\n      });\n\n      event?.addTrace(EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal);\n\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionPropose.autoReject,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n    transportType,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        sessionTopic,\n      });\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic, {\n        transportType,\n      });\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const { relay, controller, expiry, namespaces, sessionProperties, sessionConfig } =\n        payload.params;\n      const session = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic: \"\", // pairingTopic will be set in the `session_connect` handler\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        controller: controller.publicKey,\n        self: {\n          publicKey: \"\",\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(sessionConfig && { sessionConfig }),\n        transportType: TRANSPORT_TYPES.relay,\n      };\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 997`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { session });\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.warn(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return currentId.toString().slice(0, -3) < lastId.toString().slice(0, -3);\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]).catch((err) => this.client.logger.error(err));\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (args) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id))),\n        encryptedId,\n        metadata: session.peer.metadata,\n        transportType,\n      });\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n\n      if (\n        transportType === TRANSPORT_TYPES.link_mode &&\n        session.peer.metadata.redirect?.universal\n      ) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(session.peer.metadata.redirect?.universal);\n      }\n\n      if (this.client.signConfig?.disableRequestQueue) {\n        this.emitSessionRequest(request);\n      } else {\n        this.addSessionRequestToSessionRequestQueue(request);\n        this.processSessionRequestQueue();\n      }\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    args,\n  ) => {\n    const { topic, payload, attestation, encryptedId, transportType } = args;\n    try {\n      const { requester, authPayload, expiryTimestamp } = payload.params;\n      const verifyContext = await this.getVerifyContext({\n        attestationId: attestation,\n        hash: hashMessage(JSON.stringify(payload)),\n        encryptedId,\n        metadata: requester.metadata,\n        transportType,\n      });\n      const pendingRequest = {\n        requester,\n        pairingTopic: topic,\n        id: payload.id,\n        authPayload,\n        verifyContext,\n        expiryTimestamp,\n      };\n      await this.setAuthRequest(payload.id, {\n        request: pendingRequest,\n        pairingTopic: topic,\n        transportType,\n      });\n\n      if (transportType === TRANSPORT_TYPES.link_mode && requester.metadata.redirect?.universal) {\n        // save app as supported for link mode\n        this.client.core.addLinkModeSupportedApp(requester.metadata.redirect.universal);\n      }\n\n      this.client.events.emit(\"session_authenticate\", {\n        topic,\n        params: payload.params,\n        id: payload.id,\n        verifyContext,\n      });\n    } catch (err: any) {\n      this.client.logger.error(err);\n\n      const receiverPublicKey = payload.params.requester.publicKey;\n      const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n      const appLink = this.getAppLinkIfEnabled(payload.params.requester.metadata, transportType);\n\n      const encodeOpts = {\n        type: TYPE_1,\n        receiverPublicKey,\n        senderPublicKey,\n      };\n      await this.sendError({\n        id: payload.id,\n        topic,\n        error: err,\n        encodeOpts,\n        rpcOpts: ENGINE_RPC_OPTS.wc_sessionAuthenticate.autoReject,\n        appLink,\n      });\n    }\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.emitSessionRequest(request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private emitSessionRequest = (request: PendingRequestTypes.Struct) => {\n    this.client.events.emit(\"session_request\", request);\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n      if (id && this.client.auth.requests.keys.includes(id)) {\n        return await this.deletePendingAuthRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest({\n      topic: pairing.topic,\n      payload: formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n        },\n        proposal.id,\n      ),\n    });\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (params: {\n    attestationId?: string;\n    hash?: string;\n    encryptedId?: string;\n    metadata: CoreTypes.Metadata;\n    transportType?: RelayerTypes.TransportType;\n  }) => {\n    const { attestationId, hash, encryptedId, metadata, transportType } = params;\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      if (transportType === TRANSPORT_TYPES.link_mode) {\n        const applink = this.getAppLinkIfEnabled(metadata, transportType);\n        context.verified.validation =\n          applink && new URL(applink).origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n        return context;\n      }\n      const result = await this.client.core.verify.resolve({\n        attestationId,\n        hash,\n        encryptedId,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.warn(e);\n    }\n\n    this.client.logger.debug(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\n    Object.values(properties).forEach((property) => {\n      if (!isValidString(property, false)) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isLinkModeEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): boolean => {\n    if (!peerMetadata || transportType !== TRANSPORT_TYPES.link_mode) return false;\n\n    return (\n      this.client.metadata?.redirect?.linkMode === true &&\n      this.client.metadata?.redirect?.universal !== undefined &&\n      this.client.metadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.universal !== undefined &&\n      peerMetadata?.redirect?.universal !== \"\" &&\n      peerMetadata?.redirect?.linkMode === true &&\n      this.client.core.linkModeSupportedApps.includes(peerMetadata.redirect.universal) &&\n      typeof (global as any)?.Linking !== \"undefined\"\n    );\n  };\n\n  private getAppLinkIfEnabled = (\n    peerMetadata?: CoreTypes.Metadata,\n    transportType?: RelayerTypes.TransportType,\n  ): string | undefined => {\n    return this.isLinkModeEnabled(peerMetadata, transportType)\n      ? peerMetadata?.redirect?.universal\n      : undefined;\n  };\n\n  private handleLinkModeMessage = ({ url }: { url: string }) => {\n    if (!url || !url.includes(\"wc_ev\") || !url.includes(\"topic\")) return;\n\n    const topic = getSearchParamFromURL(url, \"topic\") || \"\";\n    const message = decodeURIComponent(getSearchParamFromURL(url, \"wc_ev\") || \"\");\n\n    const sessionExists = this.client.session.keys.includes(topic);\n\n    if (sessionExists) {\n      this.client.session.update(topic, { transportType: TRANSPORT_TYPES.link_mode });\n    }\n\n    this.client.core.dispatchEnvelope({ topic, message, sessionExists });\n  };\n\n  private registerLinkModeListeners = async () => {\n    if (isTestRun() || (isReactNative() && this.client.metadata.redirect?.linkMode)) {\n      const linking = (global as any)?.Linking;\n      // global.Linking is set by react-native-compat\n      if (typeof linking !== \"undefined\") {\n        // set URL listener\n        linking.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n\n        // check for initial URL -> cold boots\n        const initialUrl = await linking.getInitialURL();\n        if (initialUrl) {\n          // wait to process the message to allow event listeners to be registered by the implementing app\n          setTimeout(() => {\n            this.handleLinkModeMessage({ url: initialUrl });\n          }, 50);\n        }\n      }\n    }\n  };\n\n  private shouldSetTVF = (\n    protocolMethod: JsonRpcTypes.WcMethod,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n  ) => {\n    if (!params) return false;\n    if (protocolMethod !== \"wc_sessionRequest\") return false;\n    const { request } = params;\n    return Object.keys(TVF_METHODS).includes(request.method);\n  };\n\n  private getTVFParams = (\n    id: number,\n    params: JsonRpcTypes.RequestParams[\"wc_sessionRequest\"],\n    result?: any,\n  ) => {\n    try {\n      const requestMethod = params.request.method;\n      const txHashes = this.extractTxHashesFromResult(requestMethod, result);\n      const tvf: RelayerTypes.ITVF = {\n        correlationId: id,\n        rpcMethods: [requestMethod],\n        chainId: params.chainId,\n        ...(this.isValidContractData(params.request.params) && {\n          // initially only get contractAddresses from EVM txs\n          contractAddresses: [params.request.params?.[0]?.to],\n        }),\n        txHashes,\n      };\n      return tvf;\n    } catch (e) {\n      this.client.logger.warn(\"Error getting TVF params\", e);\n    }\n    return {};\n  };\n\n  private isValidContractData = (params: any) => {\n    if (!params) return false;\n    try {\n      const data = params?.data || params?.[0]?.data;\n\n      if (!data.startsWith(\"0x\")) return false;\n\n      const hexPart = data.slice(2);\n      if (!/^[0-9a-fA-F]*$/.test(hexPart)) return false;\n\n      return hexPart.length % 2 === 0;\n    } catch (e) {}\n    return false;\n  };\n\n  private extractTxHashesFromResult = (method: string, result: any): string[] => {\n    try {\n      const methodConfig = TVF_METHODS[method as keyof typeof TVF_METHODS];\n      // result = 0x...\n      if (typeof result === \"string\") {\n        return [result];\n      }\n\n      // result = { key: [0x...] } or { key: 0x... }\n      const hashes = result[methodConfig.key];\n\n      // result = { key: [0x...] }\n      if (isValidArray(hashes)) {\n        return hashes;\n\n        // result = { key: 0x... }\n      } else if (typeof hashes === \"string\") {\n        return [hashes];\n      }\n    } catch (e) {\n      this.client.logger.warn(\"Error extracting tx hashes from result\", e);\n    }\n    return [];\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(public core: ICore, public logger: Logger) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport { getAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n  public signConfig?: ISignClient[\"signConfig\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = opts?.metadata || getAppMetadata();\n    this.signConfig = opts?.signConfig;\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params, walletUniversalLink) => {\n    try {\n      return await this.engine.authenticate(params, walletUniversalLink);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.auth.init();\n      await this.engine.init();\n      this.logger.info(`SignClient Initialization Success`);\n      setTimeout(() => {\n        this.engine.processRelayMessageCache();\n      }, toMiliseconds(ONE_SECOND));\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","__publicField","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","pairing","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","engineEvent","session","completeSession","TRANSPORT_TYPES","id","_a","_b","_c","configEvent","EVENT_CLIENT_SESSION_TRACES","EVENT_CLIENT_SESSION_ERRORS","relayProtocol","namespaces","sessionConfig","proposer","event","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","transportType","getSdkError","reason","acknowledged","clientRpcId","payloadId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","protocolMethod","appLink","protocolRequestParams","shouldSetTVF","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","isSessionCompatible","walletUniversalLink","isLinkMode","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","authRequestExpiry","onSessionConnect","onAuthenticate","sessionObject","fallbackId","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","linkModeURL","formatJsonRpcRequest","TYPE_2","BASE64URL","getLinkModeURL","sessionAuthenticateResponseParams","auths","EVENT_CLIENT_AUTHENTICATE_TRACES","EVENT_CLIENT_AUTHENTICATE_ERRORS","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","duplicates","p","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","tvf","encoding","BASE64","attestation","METHODS_TO_VERIFY","decryptedId","hashMessage","opts","redirectURL","formatJsonRpcResult","record","rpcOpts","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","encryptedId","reqMethod","resMethod","requestMethod","expectedMethods","EVENT_CLIENT_PAIRING_ERRORS","EVENT_CLIENT_PAIRING_TRACES","err","subscriptionId","target","relay","controller","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","attestationId","hash","metadata","context","VERIFY_SERVER","applink","properties","property","i","numItemsToDelete","k","deletedRecord","peerMetadata","_d","_e","_f","_g","_h","_i","url","getSearchParamFromURL","sessionExists","isTestRun","isReactNative","linking","initialUrl","TVF_METHODS","txHashes","data","hexPart","methodConfig","hashes","isValidArray","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","o","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}