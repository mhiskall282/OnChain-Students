"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var h=require("@walletconnect/core"),J=require("@walletconnect/logger"),Se=require("@walletconnect/types"),T=require("@walletconnect/time"),i=require("@walletconnect/utils"),we=require("events"),w=require("@walletconnect/jsonrpc-utils");function Me(m){return m&&typeof m=="object"&&"default"in m?m:{default:m}}var Ue=Me(we);const oe="wc",ae=2,ce="client",X=`${oe}@${ae}:${ce}:`,z={name:ce,logger:"error",controller:!1,relayUrl:"wss://relay.walletconnect.org"},ke={session_proposal:"session_proposal",session_update:"session_update",session_extend:"session_extend",session_ping:"session_ping",session_delete:"session_delete",session_expire:"session_expire",session_request:"session_request",session_request_sent:"session_request_sent",session_event:"session_event",proposal_expire:"proposal_expire",session_authenticate:"session_authenticate",session_request_expire:"session_request_expire"},$e={database:":memory:"},le="WALLETCONNECT_DEEPLINK_CHOICE",Fe={created:"history_created",updated:"history_updated",deleted:"history_deleted",sync:"history_sync"},Ke="history",Ge="0.3",Re="proposal",Ye=T.THIRTY_DAYS,Te="Proposal expired",Ie="session",U=T.SEVEN_DAYS,Ne="engine",P={wc_sessionPropose:{req:{ttl:T.FIVE_MINUTES,prompt:!0,tag:1100},res:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1101},reject:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1120},autoReject:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1121}},wc_sessionSettle:{req:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1102},res:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:T.ONE_DAY,prompt:!1,tag:1104},res:{ttl:T.ONE_DAY,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:T.ONE_DAY,prompt:!1,tag:1106},res:{ttl:T.ONE_DAY,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:T.FIVE_MINUTES,prompt:!0,tag:1108},res:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:T.FIVE_MINUTES,prompt:!0,tag:1110},res:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:T.ONE_DAY,prompt:!1,tag:1112},res:{ttl:T.ONE_DAY,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:T.ONE_DAY,prompt:!1,tag:1114},res:{ttl:T.ONE_DAY,prompt:!1,tag:1115}},wc_sessionAuthenticate:{req:{ttl:T.ONE_HOUR,prompt:!0,tag:1116},res:{ttl:T.ONE_HOUR,prompt:!1,tag:1117},reject:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1118},autoReject:{ttl:T.FIVE_MINUTES,prompt:!1,tag:1119}}},B={min:T.FIVE_MINUTES,max:T.SEVEN_DAYS},b={idle:"IDLE",active:"ACTIVE"},pe={eth_sendTransaction:{key:""},eth_sendRawTransaction:{key:""},wallet_sendCalls:{key:""},solana_signTransaction:{key:"signature"},solana_signAllTransactions:{key:"transactions"},solana_signAndSendTransaction:{key:"signature"}},ve="request",fe=["wc_sessionPropose","wc_sessionRequest","wc_authRequest","wc_sessionAuthenticate"],Oe="wc",He=1.5,Pe="auth",qe="authKeys",Ae="pairingTopics",Ce="requests",G=`${Oe}@${1.5}:${Pe}:`,Y=`${G}:PUB_KEY`;var je=Object.defineProperty,Qe=Object.defineProperties,Je=Object.getOwnPropertyDescriptors,Ve=Object.getOwnPropertySymbols,Xe=Object.prototype.hasOwnProperty,ze=Object.prototype.propertyIsEnumerable,he=(m,o,e)=>o in m?je(m,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):m[o]=e,v=(m,o)=>{for(var e in o||(o={}))Xe.call(o,e)&&he(m,e,o[e]);if(Ve)for(var e of Ve(o))ze.call(o,e)&&he(m,e,o[e]);return m},V=(m,o)=>Qe(m,Je(o)),l=(m,o,e)=>he(m,typeof o!="symbol"?o+"":o,e);class Be extends Se.IEngine{constructor(o){super(o),l(this,"name",Ne),l(this,"events",new Ue.default),l(this,"initialized",!1),l(this,"requestQueue",{state:b.idle,queue:[]}),l(this,"sessionRequestQueue",{state:b.idle,queue:[]}),l(this,"requestQueueDelay",T.ONE_SECOND),l(this,"expectedPairingMethodMap",new Map),l(this,"recentlyDeletedMap",new Map),l(this,"recentlyDeletedLimit",200),l(this,"relayMessageCache",[]),l(this,"init",async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.registerPairingEvents(),await this.registerLinkModeListeners(),this.client.core.pairing.register({methods:Object.keys(P)}),this.initialized=!0,setTimeout(()=>{this.sessionRequestQueue.queue=this.getPendingSessionRequests(),this.processSessionRequestQueue()},T.toMiliseconds(this.requestQueueDelay)))}),l(this,"connect",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();const t=V(v({},e),{requiredNamespaces:e.requiredNamespaces||{},optionalNamespaces:e.optionalNamespaces||{}});await this.isValidConnect(t);const{pairingTopic:s,requiredNamespaces:r,optionalNamespaces:n,sessionProperties:a,relays:c}=t;let p=s,g,E=!1;try{if(p){const N=this.client.core.pairing.pairings.get(p);this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."),E=N.active}}catch(N){throw this.client.logger.error(`connect() -> pairing.get(${p}) failed`),N}if(!p||!E){const{topic:N,uri:f}=await this.client.core.pairing.create();p=N,g=f}if(!p){const{message:N}=i.getInternalError("NO_MATCHING_KEY",`connect() pairing topic: ${p}`);throw new Error(N)}const y=await this.client.core.crypto.generateKeyPair(),u=P.wc_sessionPropose.req.ttl||T.FIVE_MINUTES,_=i.calcExpiry(u),I=v({requiredNamespaces:r,optionalNamespaces:n,relays:c??[{protocol:h.RELAYER_DEFAULT_PROTOCOL}],proposer:{publicKey:y,metadata:this.client.metadata},expiryTimestamp:_,pairingTopic:p},a&&{sessionProperties:a}),{reject:O,resolve:d,done:S}=i.createDelayedPromise(u,Te);this.events.once(i.engineEvent("session_connect"),async({error:N,session:f})=>{if(N)O(N);else if(f){f.self.publicKey=y;const x=V(v({},f),{pairingTopic:I.pairingTopic,requiredNamespaces:I.requiredNamespaces,optionalNamespaces:I.optionalNamespaces,transportType:h.TRANSPORT_TYPES.relay});await this.client.session.set(f.topic,x),await this.setExpiry(f.topic,f.expiry),p&&await this.client.core.pairing.updateMetadata({topic:p,metadata:f.peer.metadata}),this.cleanupDuplicatePairings(x),d(x)}});const L=await this.sendRequest({topic:p,method:"wc_sessionPropose",params:I,throwOnFailedPublish:!0});return await this.setProposal(L,v({id:L},I)),{uri:g,approval:S}}),l(this,"pair",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{return await this.client.core.pairing.pair(e)}catch(t){throw this.client.logger.error("pair() failed"),t}}),l(this,"approve",async e=>{var t,s,r;const n=this.client.core.eventClient.createEvent({properties:{topic:(t=e?.id)==null?void 0:t.toString(),trace:[h.EVENT_CLIENT_SESSION_TRACES.session_approve_started]}});try{this.isInitialized(),await this.confirmOnlineStateOrThrow()}catch(A){throw n.setError(h.EVENT_CLIENT_SESSION_ERRORS.no_internet_connection),A}try{await this.isValidProposalId(e?.id)}catch(A){throw this.client.logger.error(`approve() -> proposal.get(${e?.id}) failed`),n.setError(h.EVENT_CLIENT_SESSION_ERRORS.proposal_not_found),A}try{await this.isValidApprove(e)}catch(A){throw this.client.logger.error("approve() -> isValidApprove() failed"),n.setError(h.EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure),A}const{id:a,relayProtocol:c,namespaces:p,sessionProperties:g,sessionConfig:E}=e,y=this.client.proposal.get(a);this.client.core.eventClient.deleteEvent({eventId:n.eventId});const{pairingTopic:u,proposer:_,requiredNamespaces:I,optionalNamespaces:O}=y;let d=(s=this.client.core.eventClient)==null?void 0:s.getEvent({topic:u});d||(d=(r=this.client.core.eventClient)==null?void 0:r.createEvent({type:h.EVENT_CLIENT_SESSION_TRACES.session_approve_started,properties:{topic:u,trace:[h.EVENT_CLIENT_SESSION_TRACES.session_approve_started,h.EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success]}}));const S=await this.client.core.crypto.generateKeyPair(),L=_.publicKey,N=await this.client.core.crypto.generateSharedKey(S,L),f=v(v({relay:{protocol:c??"irn"},namespaces:p,controller:{publicKey:S,metadata:this.client.metadata},expiry:i.calcExpiry(U)},g&&{sessionProperties:g}),E&&{sessionConfig:E}),x=h.TRANSPORT_TYPES.relay;d.addTrace(h.EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);try{await this.client.core.relayer.subscribe(N,{transportType:x})}catch(A){throw d.setError(h.EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure),A}d.addTrace(h.EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);const k=V(v({},f),{topic:N,requiredNamespaces:I,optionalNamespaces:O,pairingTopic:u,acknowledged:!1,self:f.controller,peer:{publicKey:_.publicKey,metadata:_.metadata},controller:S,transportType:h.TRANSPORT_TYPES.relay});await this.client.session.set(N,k),d.addTrace(h.EVENT_CLIENT_SESSION_TRACES.store_session);try{d.addTrace(h.EVENT_CLIENT_SESSION_TRACES.publishing_session_settle),await this.sendRequest({topic:N,method:"wc_sessionSettle",params:f,throwOnFailedPublish:!0}).catch(A=>{throw d?.setError(h.EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure),A}),d.addTrace(h.EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success),d.addTrace(h.EVENT_CLIENT_SESSION_TRACES.publishing_session_approve),await this.sendResult({id:a,topic:u,result:{relay:{protocol:c??"irn"},responderPublicKey:S},throwOnFailedPublish:!0}).catch(A=>{throw d?.setError(h.EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure),A}),d.addTrace(h.EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success)}catch(A){throw this.client.logger.error(A),this.client.session.delete(N,i.getSdkError("USER_DISCONNECTED")),await this.client.core.relayer.unsubscribe(N),A}return this.client.core.eventClient.deleteEvent({eventId:d.eventId}),await this.client.core.pairing.updateMetadata({topic:u,metadata:_.metadata}),await this.client.proposal.delete(a,i.getSdkError("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:u}),await this.setExpiry(N,i.calcExpiry(U)),{topic:N,acknowledged:()=>Promise.resolve(this.client.session.get(N))}}),l(this,"reject",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidReject(e)}catch(n){throw this.client.logger.error("reject() -> isValidReject() failed"),n}const{id:t,reason:s}=e;let r;try{r=this.client.proposal.get(t).pairingTopic}catch(n){throw this.client.logger.error(`reject() -> proposal.get(${t}) failed`),n}r&&(await this.sendError({id:t,topic:r,error:s,rpcOpts:P.wc_sessionPropose.reject}),await this.client.proposal.delete(t,i.getSdkError("USER_DISCONNECTED")))}),l(this,"update",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidUpdate(e)}catch(E){throw this.client.logger.error("update() -> isValidUpdate() failed"),E}const{topic:t,namespaces:s}=e,{done:r,resolve:n,reject:a}=i.createDelayedPromise(),c=w.payloadId(),p=w.getBigIntRpcId().toString(),g=this.client.session.get(t).namespaces;return this.events.once(i.engineEvent("session_update",c),({error:E})=>{E?a(E):n()}),await this.client.session.update(t,{namespaces:s}),await this.sendRequest({topic:t,method:"wc_sessionUpdate",params:{namespaces:s},throwOnFailedPublish:!0,clientRpcId:c,relayRpcId:p}).catch(E=>{this.client.logger.error(E),this.client.session.update(t,{namespaces:g}),a(E)}),{acknowledged:r}}),l(this,"extend",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidExtend(e)}catch(c){throw this.client.logger.error("extend() -> isValidExtend() failed"),c}const{topic:t}=e,s=w.payloadId(),{done:r,resolve:n,reject:a}=i.createDelayedPromise();return this.events.once(i.engineEvent("session_extend",s),({error:c})=>{c?a(c):n()}),await this.setExpiry(t,i.calcExpiry(U)),this.sendRequest({topic:t,method:"wc_sessionExtend",params:{},clientRpcId:s,throwOnFailedPublish:!0}).catch(c=>{a(c)}),{acknowledged:r}}),l(this,"request",async e=>{this.isInitialized();try{await this.isValidRequest(e)}catch(d){throw this.client.logger.error("request() -> isValidRequest() failed"),d}const{chainId:t,request:s,topic:r,expiry:n=P.wc_sessionRequest.req.ttl}=e,a=this.client.session.get(r);a?.transportType===h.TRANSPORT_TYPES.relay&&await this.confirmOnlineStateOrThrow();const c=w.payloadId(),p=w.getBigIntRpcId().toString(),{done:g,resolve:E,reject:y}=i.createDelayedPromise(n,"Request expired. Please try again.");this.events.once(i.engineEvent("session_request",c),({error:d,result:S})=>{d?y(d):E(S)});const u="wc_sessionRequest",_=this.getAppLinkIfEnabled(a.peer.metadata,a.transportType);if(_)return await this.sendRequest({clientRpcId:c,relayRpcId:p,topic:r,method:u,params:{request:V(v({},s),{expiryTimestamp:i.calcExpiry(n)}),chainId:t},expiry:n,throwOnFailedPublish:!0,appLink:_}).catch(d=>y(d)),this.client.events.emit("session_request_sent",{topic:r,request:s,chainId:t,id:c}),await g();const I={request:V(v({},s),{expiryTimestamp:i.calcExpiry(n)}),chainId:t},O=this.shouldSetTVF(u,I);return await Promise.all([new Promise(async d=>{await this.sendRequest(v({clientRpcId:c,relayRpcId:p,topic:r,method:u,params:I,expiry:n,throwOnFailedPublish:!0},O&&{tvf:this.getTVFParams(c,I)})).catch(S=>y(S)),this.client.events.emit("session_request_sent",{topic:r,request:s,chainId:t,id:c}),d()}),new Promise(async d=>{var S;if(!((S=a.sessionConfig)!=null&&S.disableDeepLink)){const L=await i.getDeepLink(this.client.core.storage,le);await i.handleDeeplinkRedirect({id:c,topic:r,wcDeepLink:L})}d()}),g()]).then(d=>d[2])}),l(this,"respond",async e=>{this.isInitialized(),await this.isValidRespond(e);const{topic:t,response:s}=e,{id:r}=s,n=this.client.session.get(t);n.transportType===h.TRANSPORT_TYPES.relay&&await this.confirmOnlineStateOrThrow();const a=this.getAppLinkIfEnabled(n.peer.metadata,n.transportType);w.isJsonRpcResult(s)?await this.sendResult({id:r,topic:t,result:s.result,throwOnFailedPublish:!0,appLink:a}):w.isJsonRpcError(s)&&await this.sendError({id:r,topic:t,error:s.error,appLink:a}),this.cleanupAfterResponse(e)}),l(this,"ping",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow();try{await this.isValidPing(e)}catch(s){throw this.client.logger.error("ping() -> isValidPing() failed"),s}const{topic:t}=e;if(this.client.session.keys.includes(t)){const s=w.payloadId(),r=w.getBigIntRpcId().toString(),{done:n,resolve:a,reject:c}=i.createDelayedPromise();this.events.once(i.engineEvent("session_ping",s),({error:p})=>{p?c(p):a()}),await Promise.all([this.sendRequest({topic:t,method:"wc_sessionPing",params:{},throwOnFailedPublish:!0,clientRpcId:s,relayRpcId:r}),n()])}else this.client.core.pairing.pairings.keys.includes(t)&&(this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."),await this.client.core.pairing.ping({topic:t}))}),l(this,"emit",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow(),await this.isValidEmit(e);const{topic:t,event:s,chainId:r}=e,n=w.getBigIntRpcId().toString(),a=w.payloadId();await this.sendRequest({topic:t,method:"wc_sessionEvent",params:{event:s,chainId:r},throwOnFailedPublish:!0,relayRpcId:n,clientRpcId:a})}),l(this,"disconnect",async e=>{this.isInitialized(),await this.confirmOnlineStateOrThrow(),await this.isValidDisconnect(e);const{topic:t}=e;if(this.client.session.keys.includes(t))await this.sendRequest({topic:t,method:"wc_sessionDelete",params:i.getSdkError("USER_DISCONNECTED"),throwOnFailedPublish:!0}),await this.deleteSession({topic:t,emitEvent:!1});else if(this.client.core.pairing.pairings.keys.includes(t))await this.client.core.pairing.disconnect({topic:t});else{const{message:s}=i.getInternalError("MISMATCHED_TOPIC",`Session or pairing topic not found: ${t}`);throw new Error(s)}}),l(this,"find",e=>(this.isInitialized(),this.client.session.getAll().filter(t=>i.isSessionCompatible(t,e)))),l(this,"getPendingSessionRequests",()=>this.client.pendingRequest.getAll()),l(this,"authenticate",async(e,t)=>{var s;this.isInitialized(),this.isValidAuthenticate(e);const r=t&&this.client.core.linkModeSupportedApps.includes(t)&&((s=this.client.metadata.redirect)==null?void 0:s.linkMode),n=r?h.TRANSPORT_TYPES.link_mode:h.TRANSPORT_TYPES.relay;n===h.TRANSPORT_TYPES.relay&&await this.confirmOnlineStateOrThrow();const{chains:a,statement:c="",uri:p,domain:g,nonce:E,type:y,exp:u,nbf:_,methods:I=[],expiry:O}=e,d=[...e.resources||[]],{topic:S,uri:L}=await this.client.core.pairing.create({methods:["wc_sessionAuthenticate"],transportType:n});this.client.logger.info({message:"Generated new pairing",pairing:{topic:S,uri:L}});const N=await this.client.core.crypto.generateKeyPair(),f=i.hashKey(N);if(await Promise.all([this.client.auth.authKeys.set(Y,{responseTopic:f,publicKey:N}),this.client.auth.pairingTopics.set(f,{topic:f,pairingTopic:S})]),await this.client.core.relayer.subscribe(f,{transportType:n}),this.client.logger.info(`sending request to new pairing topic: ${S}`),I.length>0){const{namespace:C}=i.parseChainId(a[0]);let q=i.createEncodedRecap(C,"request",I);i.getRecapFromResources(d)&&(q=i.mergeEncodedRecaps(q,d.pop())),d.push(q)}const x=O&&O>P.wc_sessionAuthenticate.req.ttl?O:P.wc_sessionAuthenticate.req.ttl,k={authPayload:{type:y??"caip122",chains:a,statement:c,aud:p,domain:g,version:"1",nonce:E,iat:new Date().toISOString(),exp:u,nbf:_,resources:d},requester:{publicKey:N,metadata:this.client.metadata},expiryTimestamp:i.calcExpiry(x)},A={eip155:{chains:a,methods:[...new Set(["personal_sign",...I])],events:["chainChanged","accountsChanged"]}},ue={requiredNamespaces:{},optionalNamespaces:A,relays:[{protocol:"irn"}],pairingTopic:S,proposer:{publicKey:N,metadata:this.client.metadata},expiryTimestamp:i.calcExpiry(P.wc_sessionPropose.req.ttl)},{done:be,resolve:ge,reject:Z}=i.createDelayedPromise(x,"Request expired"),H=async({error:C,session:q})=>{if(this.events.off(i.engineEvent("session_request",D),ee),C)Z(C);else if(q){q.self.publicKey=N,await this.client.session.set(q.topic,q),await this.setExpiry(q.topic,q.expiry),S&&await this.client.core.pairing.updateMetadata({topic:S,metadata:q.peer.metadata});const j=this.client.session.get(q.topic);await this.deleteProposal($),ge({session:j})}},ee=async C=>{var q,j,Ee;if(await this.deletePendingAuthRequest(D,{message:"fulfilled",code:0}),C.error){const K=i.getSdkError("WC_METHOD_UNSUPPORTED","wc_sessionAuthenticate");return C.error.code===K.code?void 0:(this.events.off(i.engineEvent("session_connect"),H),Z(C.error.message))}await this.deleteProposal($),this.events.off(i.engineEvent("session_connect"),H);const{cacaos:ye,responder:M}=C.result,se=[],_e=[];for(const K of ye){await i.validateSignedCacao({cacao:K,projectId:this.client.core.projectId})||(this.client.logger.error(K,"Signature verification failed"),Z(i.getSdkError("SESSION_SETTLEMENT_FAILED","Signature verification failed")));const{p:ie}=K,re=i.getRecapFromResources(ie.resources),me=[i.getNamespacedDidChainId(ie.iss)],xe=i.getDidAddress(ie.iss);if(re){const ne=i.getMethodsFromRecap(re),De=i.getChainsFromRecap(re);se.push(...ne),me.push(...De)}for(const ne of me)_e.push(`${ne}:${xe}`)}const F=await this.client.core.crypto.generateSharedKey(N,M.publicKey);let Q;se.length>0&&(Q={topic:F,acknowledged:!0,self:{publicKey:N,metadata:this.client.metadata},peer:M,controller:M.publicKey,expiry:i.calcExpiry(U),requiredNamespaces:{},optionalNamespaces:{},relay:{protocol:"irn"},pairingTopic:S,namespaces:i.buildNamespacesFromAuth([...new Set(se)],[...new Set(_e)]),transportType:n},await this.client.core.relayer.subscribe(F,{transportType:n}),await this.client.session.set(F,Q),S&&await this.client.core.pairing.updateMetadata({topic:S,metadata:M.metadata}),Q=this.client.session.get(F)),(q=this.client.metadata.redirect)!=null&&q.linkMode&&(j=M.metadata.redirect)!=null&&j.linkMode&&(Ee=M.metadata.redirect)!=null&&Ee.universal&&t&&(this.client.core.addLinkModeSupportedApp(M.metadata.redirect.universal),this.client.session.update(F,{transportType:h.TRANSPORT_TYPES.link_mode})),ge({auths:ye,session:Q})},D=w.payloadId(),$=w.payloadId();this.events.once(i.engineEvent("session_connect"),H),this.events.once(i.engineEvent("session_request",D),ee);let te;try{if(r){const C=w.formatJsonRpcRequest("wc_sessionAuthenticate",k,D);this.client.core.history.set(S,C);const q=await this.client.core.crypto.encode("",C,{type:i.TYPE_2,encoding:i.BASE64URL});te=i.getLinkModeURL(t,S,q)}else await Promise.all([this.sendRequest({topic:S,method:"wc_sessionAuthenticate",params:k,expiry:e.expiry,throwOnFailedPublish:!0,clientRpcId:D}),this.sendRequest({topic:S,method:"wc_sessionPropose",params:ue,expiry:P.wc_sessionPropose.req.ttl,throwOnFailedPublish:!0,clientRpcId:$})])}catch(C){throw this.events.off(i.engineEvent("session_connect"),H),this.events.off(i.engineEvent("session_request",D),ee),C}return await this.setProposal($,v({id:$},ue)),await this.setAuthRequest(D,{request:V(v({},k),{verifyContext:{}}),pairingTopic:S,transportType:n}),{uri:te??L,response:be}}),l(this,"approveSessionAuthenticate",async e=>{const{id:t,auths:s}=e,r=this.client.core.eventClient.createEvent({properties:{topic:t.toString(),trace:[h.EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started]}});try{this.isInitialized()}catch(O){throw r.setError(h.EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection),O}const n=this.getPendingAuthRequest(t);if(!n)throw r.setError(h.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found),new Error(`Could not find pending auth request with id ${t}`);const a=n.transportType||h.TRANSPORT_TYPES.relay;a===h.TRANSPORT_TYPES.relay&&await this.confirmOnlineStateOrThrow();const c=n.requester.publicKey,p=await this.client.core.crypto.generateKeyPair(),g=i.hashKey(c),E={type:i.TYPE_1,receiverPublicKey:c,senderPublicKey:p},y=[],u=[];for(const O of s){if(!await i.validateSignedCacao({cacao:O,projectId:this.client.core.projectId})){r.setError(h.EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);const f=i.getSdkError("SESSION_SETTLEMENT_FAILED","Signature verification failed");throw await this.sendError({id:t,topic:g,error:f,encodeOpts:E}),new Error(f.message)}r.addTrace(h.EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);const{p:d}=O,S=i.getRecapFromResources(d.resources),L=[i.getNamespacedDidChainId(d.iss)],N=i.getDidAddress(d.iss);if(S){const f=i.getMethodsFromRecap(S),x=i.getChainsFromRecap(S);y.push(...f),L.push(...x)}for(const f of L)u.push(`${f}:${N}`)}const _=await this.client.core.crypto.generateSharedKey(p,c);r.addTrace(h.EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);let I;if(y?.length>0){I={topic:_,acknowledged:!0,self:{publicKey:p,metadata:this.client.metadata},peer:{publicKey:c,metadata:n.requester.metadata},controller:c,expiry:i.calcExpiry(U),authentication:s,requiredNamespaces:{},optionalNamespaces:{},relay:{protocol:"irn"},pairingTopic:n.pairingTopic,namespaces:i.buildNamespacesFromAuth([...new Set(y)],[...new Set(u)]),transportType:a},r.addTrace(h.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);try{await this.client.core.relayer.subscribe(_,{transportType:a})}catch(O){throw r.setError(h.EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure),O}r.addTrace(h.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success),await this.client.session.set(_,I),r.addTrace(h.EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session),await this.client.core.pairing.updateMetadata({topic:n.pairingTopic,metadata:n.requester.metadata})}r.addTrace(h.EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);try{await this.sendResult({topic:g,id:t,result:{cacaos:s,responder:{publicKey:p,metadata:this.client.metadata}},encodeOpts:E,throwOnFailedPublish:!0,appLink:this.getAppLinkIfEnabled(n.requester.metadata,a)})}catch(O){throw r.setError(h.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure),O}return await this.client.auth.requests.delete(t,{message:"fulfilled",code:0}),await this.client.core.pairing.activate({topic:n.pairingTopic}),this.client.core.eventClient.deleteEvent({eventId:r.eventId}),{session:I}}),l(this,"rejectSessionAuthenticate",async e=>{this.isInitialized();const{id:t,reason:s}=e,r=this.getPendingAuthRequest(t);if(!r)throw new Error(`Could not find pending auth request with id ${t}`);r.transportType===h.TRANSPORT_TYPES.relay&&await this.confirmOnlineStateOrThrow();const n=r.requester.publicKey,a=await this.client.core.crypto.generateKeyPair(),c=i.hashKey(n),p={type:i.TYPE_1,receiverPublicKey:n,senderPublicKey:a};await this.sendError({id:t,topic:c,error:s,encodeOpts:p,rpcOpts:P.wc_sessionAuthenticate.reject,appLink:this.getAppLinkIfEnabled(r.requester.metadata,r.transportType)}),await this.client.auth.requests.delete(t,{message:"rejected",code:0}),await this.client.proposal.delete(t,i.getSdkError("USER_DISCONNECTED"))}),l(this,"formatAuthMessage",e=>{this.isInitialized();const{request:t,iss:s}=e;return i.formatMessage(t,s)}),l(this,"processRelayMessageCache",()=>{setTimeout(async()=>{if(this.relayMessageCache.length!==0)for(;this.relayMessageCache.length>0;)try{const e=this.relayMessageCache.shift();e&&await this.onRelayMessage(e)}catch(e){this.client.logger.error(e)}},50)}),l(this,"cleanupDuplicatePairings",async e=>{if(e.pairingTopic)try{const t=this.client.core.pairing.pairings.get(e.pairingTopic),s=this.client.core.pairing.pairings.getAll().filter(r=>{var n,a;return((n=r.peerMetadata)==null?void 0:n.url)&&((a=r.peerMetadata)==null?void 0:a.url)===e.peer.metadata.url&&r.topic&&r.topic!==t.topic});if(s.length===0)return;this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`),await Promise.all(s.map(r=>this.client.core.pairing.disconnect({topic:r.topic}))),this.client.logger.info("Duplicate pairings clean up finished")}catch(t){this.client.logger.error(t)}}),l(this,"deleteSession",async e=>{var t;const{topic:s,expirerHasDeleted:r=!1,emitEvent:n=!0,id:a=0}=e,{self:c}=this.client.session.get(s);await this.client.core.relayer.unsubscribe(s),await this.client.session.delete(s,i.getSdkError("USER_DISCONNECTED")),this.addToRecentlyDeleted(s,"session"),this.client.core.crypto.keychain.has(c.publicKey)&&await this.client.core.crypto.deleteKeyPair(c.publicKey),this.client.core.crypto.keychain.has(s)&&await this.client.core.crypto.deleteSymKey(s),r||this.client.core.expirer.del(s),this.client.core.storage.removeItem(le).catch(p=>this.client.logger.warn(p)),this.getPendingSessionRequests().forEach(p=>{p.topic===s&&this.deletePendingSessionRequest(p.id,i.getSdkError("USER_DISCONNECTED"))}),s===((t=this.sessionRequestQueue.queue[0])==null?void 0:t.topic)&&(this.sessionRequestQueue.state=b.idle),n&&this.client.events.emit("session_delete",{id:a,topic:s})}),l(this,"deleteProposal",async(e,t)=>{if(t)try{const s=this.client.proposal.get(e),r=this.client.core.eventClient.getEvent({topic:s.pairingTopic});r?.setError(h.EVENT_CLIENT_SESSION_ERRORS.proposal_expired)}catch{}await Promise.all([this.client.proposal.delete(e,i.getSdkError("USER_DISCONNECTED")),t?Promise.resolve():this.client.core.expirer.del(e)]),this.addToRecentlyDeleted(e,"proposal")}),l(this,"deletePendingSessionRequest",async(e,t,s=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,t),s?Promise.resolve():this.client.core.expirer.del(e)]),this.addToRecentlyDeleted(e,"request"),this.sessionRequestQueue.queue=this.sessionRequestQueue.queue.filter(r=>r.id!==e),s&&(this.sessionRequestQueue.state=b.idle,this.client.events.emit("session_request_expire",{id:e}))}),l(this,"deletePendingAuthRequest",async(e,t,s=!1)=>{await Promise.all([this.client.auth.requests.delete(e,t),s?Promise.resolve():this.client.core.expirer.del(e)])}),l(this,"setExpiry",async(e,t)=>{this.client.session.keys.includes(e)&&(this.client.core.expirer.set(e,t),await this.client.session.update(e,{expiry:t}))}),l(this,"setProposal",async(e,t)=>{this.client.core.expirer.set(e,i.calcExpiry(P.wc_sessionPropose.req.ttl)),await this.client.proposal.set(e,t)}),l(this,"setAuthRequest",async(e,t)=>{const{request:s,pairingTopic:r,transportType:n=h.TRANSPORT_TYPES.relay}=t;this.client.core.expirer.set(e,s.expiryTimestamp),await this.client.auth.requests.set(e,{authPayload:s.authPayload,requester:s.requester,expiryTimestamp:s.expiryTimestamp,id:e,pairingTopic:r,verifyContext:s.verifyContext,transportType:n})}),l(this,"setPendingSessionRequest",async e=>{const{id:t,topic:s,params:r,verifyContext:n}=e,a=r.request.expiryTimestamp||i.calcExpiry(P.wc_sessionRequest.req.ttl);this.client.core.expirer.set(t,a),await this.client.pendingRequest.set(t,{id:t,topic:s,params:r,verifyContext:n})}),l(this,"sendRequest",async e=>{const{topic:t,method:s,params:r,expiry:n,relayRpcId:a,clientRpcId:c,throwOnFailedPublish:p,appLink:g,tvf:E}=e,y=w.formatJsonRpcRequest(s,r,c);let u;const _=!!g;try{const d=_?i.BASE64URL:i.BASE64;u=await this.client.core.crypto.encode(t,y,{encoding:d})}catch(d){throw await this.cleanup(),this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`),d}let I;if(fe.includes(s)){const d=i.hashMessage(JSON.stringify(y)),S=i.hashMessage(u);I=await this.client.core.verify.register({id:S,decryptedId:d})}const O=P[s].req;if(O.attestation=I,n&&(O.ttl=n),a&&(O.id=a),this.client.core.history.set(t,y),_){const d=i.getLinkModeURL(g,t,u);await global.Linking.openURL(d,this.client.name)}else{const d=P[s].req;n&&(d.ttl=n),a&&(d.id=a),d.tvf=V(v({},E),{correlationId:y.id}),p?(d.internal=V(v({},d.internal),{throwOnFailedPublish:!0}),await this.client.core.relayer.publish(t,u,d)):this.client.core.relayer.publish(t,u,d).catch(S=>this.client.logger.error(S))}return y.id}),l(this,"sendResult",async e=>{const{id:t,topic:s,result:r,throwOnFailedPublish:n,encodeOpts:a,appLink:c}=e,p=w.formatJsonRpcResult(t,r);let g;const E=c&&typeof(global==null?void 0:global.Linking)<"u";try{const _=E?i.BASE64URL:i.BASE64;g=await this.client.core.crypto.encode(s,p,V(v({},a||{}),{encoding:_}))}catch(_){throw await this.cleanup(),this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`),_}let y,u;try{y=await this.client.core.history.get(s,t);const _=y.request;try{this.shouldSetTVF(_.method,_.params)&&(u=this.getTVFParams(t,_.params,r))}catch(I){this.client.logger.warn("sendResult() -> getTVFParams() failed",I)}}catch(_){throw this.client.logger.error(`sendResult() -> history.get(${s}, ${t}) failed`),_}if(E){const _=i.getLinkModeURL(c,s,g);await global.Linking.openURL(_,this.client.name)}else{const _=P[y.request.method].res;_.tvf=V(v({},u),{correlationId:t}),n?(_.internal=V(v({},_.internal),{throwOnFailedPublish:!0}),await this.client.core.relayer.publish(s,g,_)):this.client.core.relayer.publish(s,g,_).catch(I=>this.client.logger.error(I))}await this.client.core.history.resolve(p)}),l(this,"sendError",async e=>{const{id:t,topic:s,error:r,encodeOpts:n,rpcOpts:a,appLink:c}=e,p=w.formatJsonRpcError(t,r);let g;const E=c&&typeof(global==null?void 0:global.Linking)<"u";try{const u=E?i.BASE64URL:i.BASE64;g=await this.client.core.crypto.encode(s,p,V(v({},n||{}),{encoding:u}))}catch(u){throw await this.cleanup(),this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`),u}let y;try{y=await this.client.core.history.get(s,t)}catch(u){throw this.client.logger.error(`sendError() -> history.get(${s}, ${t}) failed`),u}if(E){const u=i.getLinkModeURL(c,s,g);await global.Linking.openURL(u,this.client.name)}else{const u=a||P[y.request.method].res;this.client.core.relayer.publish(s,g,u)}await this.client.core.history.resolve(p)}),l(this,"cleanup",async()=>{const e=[],t=[];this.client.session.getAll().forEach(s=>{let r=!1;i.isExpired(s.expiry)&&(r=!0),this.client.core.crypto.keychain.has(s.topic)||(r=!0),r&&e.push(s.topic)}),this.client.proposal.getAll().forEach(s=>{i.isExpired(s.expiryTimestamp)&&t.push(s.id)}),await Promise.all([...e.map(s=>this.deleteSession({topic:s})),...t.map(s=>this.deleteProposal(s))])}),l(this,"onRelayEventRequest",async e=>{this.requestQueue.queue.push(e),await this.processRequestsQueue()}),l(this,"processRequestsQueue",async()=>{if(this.requestQueue.state===b.active){this.client.logger.info("Request queue already active, skipping...");return}for(this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`);this.requestQueue.queue.length>0;){this.requestQueue.state=b.active;const e=this.requestQueue.queue.shift();if(e)try{await this.processRequest(e)}catch(t){this.client.logger.warn(t)}}this.requestQueue.state=b.idle}),l(this,"processRequest",async e=>{const{topic:t,payload:s,attestation:r,transportType:n,encryptedId:a}=e,c=s.method;if(!this.shouldIgnorePairingRequest({topic:t,requestMethod:c}))switch(c){case"wc_sessionPropose":return await this.onSessionProposeRequest({topic:t,payload:s,attestation:r,encryptedId:a});case"wc_sessionSettle":return await this.onSessionSettleRequest(t,s);case"wc_sessionUpdate":return await this.onSessionUpdateRequest(t,s);case"wc_sessionExtend":return await this.onSessionExtendRequest(t,s);case"wc_sessionPing":return await this.onSessionPingRequest(t,s);case"wc_sessionDelete":return await this.onSessionDeleteRequest(t,s);case"wc_sessionRequest":return await this.onSessionRequest({topic:t,payload:s,attestation:r,encryptedId:a,transportType:n});case"wc_sessionEvent":return await this.onSessionEventRequest(t,s);case"wc_sessionAuthenticate":return await this.onSessionAuthenticateRequest({topic:t,payload:s,attestation:r,encryptedId:a,transportType:n});default:return this.client.logger.info(`Unsupported request method ${c}`)}}),l(this,"onRelayEventResponse",async e=>{const{topic:t,payload:s,transportType:r}=e,n=(await this.client.core.history.get(t,s.id)).request.method;switch(n){case"wc_sessionPropose":return this.onSessionProposeResponse(t,s,r);case"wc_sessionSettle":return this.onSessionSettleResponse(t,s);case"wc_sessionUpdate":return this.onSessionUpdateResponse(t,s);case"wc_sessionExtend":return this.onSessionExtendResponse(t,s);case"wc_sessionPing":return this.onSessionPingResponse(t,s);case"wc_sessionRequest":return this.onSessionRequestResponse(t,s);case"wc_sessionAuthenticate":return this.onSessionAuthenticateResponse(t,s);default:return this.client.logger.info(`Unsupported response method ${n}`)}}),l(this,"onRelayEventUnknownPayload",e=>{const{topic:t}=e,{message:s}=i.getInternalError("MISSING_OR_INVALID",`Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);throw new Error(s)}),l(this,"shouldIgnorePairingRequest",e=>{const{topic:t,requestMethod:s}=e,r=this.expectedPairingMethodMap.get(t);return!r||r.includes(s)?!1:!!(r.includes("wc_sessionAuthenticate")&&this.client.events.listenerCount("session_authenticate")>0)}),l(this,"onSessionProposeRequest",async e=>{const{topic:t,payload:s,attestation:r,encryptedId:n}=e,{params:a,id:c}=s;try{const p=this.client.core.eventClient.getEvent({topic:t});this.client.events.listenerCount("session_proposal")===0&&(console.warn("No listener for session_proposal event"),p?.setError(h.EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found)),this.isValidConnect(v({},s.params));const g=a.expiryTimestamp||i.calcExpiry(P.wc_sessionPropose.req.ttl),E=v({id:c,pairingTopic:t,expiryTimestamp:g},a);await this.setProposal(c,E);const y=await this.getVerifyContext({attestationId:r,hash:i.hashMessage(JSON.stringify(s)),encryptedId:n,metadata:E.proposer.metadata});p?.addTrace(h.EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal),this.client.events.emit("session_proposal",{id:c,params:E,verifyContext:y})}catch(p){await this.sendError({id:c,topic:t,error:p,rpcOpts:P.wc_sessionPropose.autoReject}),this.client.logger.error(p)}}),l(this,"onSessionProposeResponse",async(e,t,s)=>{const{id:r}=t;if(w.isJsonRpcResult(t)){const{result:n}=t;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:n});const a=this.client.proposal.get(r);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:a});const c=a.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:c});const p=n.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:p});const g=await this.client.core.crypto.generateSharedKey(c,p);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",sessionTopic:g});const E=await this.client.core.relayer.subscribe(g,{transportType:s});this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:E}),await this.client.core.pairing.activate({topic:e})}else if(w.isJsonRpcError(t)){await this.client.proposal.delete(r,i.getSdkError("USER_DISCONNECTED"));const n=i.engineEvent("session_connect");if(this.events.listenerCount(n)===0)throw new Error(`emitting ${n} without any listeners, 954`);this.events.emit(i.engineEvent("session_connect"),{error:t.error})}}),l(this,"onSessionSettleRequest",async(e,t)=>{const{id:s,params:r}=t;try{this.isValidSessionSettleRequest(r);const{relay:n,controller:a,expiry:c,namespaces:p,sessionProperties:g,sessionConfig:E}=t.params,y=V(v(v({topic:e,relay:n,expiry:c,namespaces:p,acknowledged:!0,pairingTopic:"",requiredNamespaces:{},optionalNamespaces:{},controller:a.publicKey,self:{publicKey:"",metadata:this.client.metadata},peer:{publicKey:a.publicKey,metadata:a.metadata}},g&&{sessionProperties:g}),E&&{sessionConfig:E}),{transportType:h.TRANSPORT_TYPES.relay}),u=i.engineEvent("session_connect");if(this.events.listenerCount(u)===0)throw new Error(`emitting ${u} without any listeners 997`);this.events.emit(i.engineEvent("session_connect"),{session:y}),await this.sendResult({id:t.id,topic:e,result:!0,throwOnFailedPublish:!0})}catch(n){await this.sendError({id:s,topic:e,error:n}),this.client.logger.error(n)}}),l(this,"onSessionSettleResponse",async(e,t)=>{const{id:s}=t;w.isJsonRpcResult(t)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(i.engineEvent("session_approve",s),{})):w.isJsonRpcError(t)&&(await this.client.session.delete(e,i.getSdkError("USER_DISCONNECTED")),this.events.emit(i.engineEvent("session_approve",s),{error:t.error}))}),l(this,"onSessionUpdateRequest",async(e,t)=>{const{params:s,id:r}=t;try{const n=`${e}_session_update`,a=i.MemoryStore.get(n);if(a&&this.isRequestOutOfSync(a,r)){this.client.logger.warn(`Discarding out of sync request - ${r}`),this.sendError({id:r,topic:e,error:i.getSdkError("INVALID_UPDATE_REQUEST")});return}this.isValidUpdate(v({topic:e},s));try{i.MemoryStore.set(n,r),await this.client.session.update(e,{namespaces:s.namespaces}),await this.sendResult({id:r,topic:e,result:!0,throwOnFailedPublish:!0})}catch(c){throw i.MemoryStore.delete(n),c}this.client.events.emit("session_update",{id:r,topic:e,params:s})}catch(n){await this.sendError({id:r,topic:e,error:n}),this.client.logger.error(n)}}),l(this,"isRequestOutOfSync",(e,t)=>t.toString().slice(0,-3)<e.toString().slice(0,-3)),l(this,"onSessionUpdateResponse",(e,t)=>{const{id:s}=t,r=i.engineEvent("session_update",s);if(this.events.listenerCount(r)===0)throw new Error(`emitting ${r} without any listeners`);w.isJsonRpcResult(t)?this.events.emit(i.engineEvent("session_update",s),{}):w.isJsonRpcError(t)&&this.events.emit(i.engineEvent("session_update",s),{error:t.error})}),l(this,"onSessionExtendRequest",async(e,t)=>{const{id:s}=t;try{this.isValidExtend({topic:e}),await this.setExpiry(e,i.calcExpiry(U)),await this.sendResult({id:s,topic:e,result:!0,throwOnFailedPublish:!0}),this.client.events.emit("session_extend",{id:s,topic:e})}catch(r){await this.sendError({id:s,topic:e,error:r}),this.client.logger.error(r)}}),l(this,"onSessionExtendResponse",(e,t)=>{const{id:s}=t,r=i.engineEvent("session_extend",s);if(this.events.listenerCount(r)===0)throw new Error(`emitting ${r} without any listeners`);w.isJsonRpcResult(t)?this.events.emit(i.engineEvent("session_extend",s),{}):w.isJsonRpcError(t)&&this.events.emit(i.engineEvent("session_extend",s),{error:t.error})}),l(this,"onSessionPingRequest",async(e,t)=>{const{id:s}=t;try{this.isValidPing({topic:e}),await this.sendResult({id:s,topic:e,result:!0,throwOnFailedPublish:!0}),this.client.events.emit("session_ping",{id:s,topic:e})}catch(r){await this.sendError({id:s,topic:e,error:r}),this.client.logger.error(r)}}),l(this,"onSessionPingResponse",(e,t)=>{const{id:s}=t,r=i.engineEvent("session_ping",s);if(this.events.listenerCount(r)===0)throw new Error(`emitting ${r} without any listeners`);setTimeout(()=>{w.isJsonRpcResult(t)?this.events.emit(i.engineEvent("session_ping",s),{}):w.isJsonRpcError(t)&&this.events.emit(i.engineEvent("session_ping",s),{error:t.error})},500)}),l(this,"onSessionDeleteRequest",async(e,t)=>{const{id:s}=t;try{this.isValidDisconnect({topic:e,reason:t.params}),Promise.all([new Promise(r=>{this.client.core.relayer.once(h.RELAYER_EVENTS.publish,async()=>{r(await this.deleteSession({topic:e,id:s}))})}),this.sendResult({id:s,topic:e,result:!0,throwOnFailedPublish:!0}),this.cleanupPendingSentRequestsForTopic({topic:e,error:i.getSdkError("USER_DISCONNECTED")})]).catch(r=>this.client.logger.error(r))}catch(r){this.client.logger.error(r)}}),l(this,"onSessionRequest",async e=>{var t,s,r;const{topic:n,payload:a,attestation:c,encryptedId:p,transportType:g}=e,{id:E,params:y}=a;try{await this.isValidRequest(v({topic:n},y));const u=this.client.session.get(n),_=await this.getVerifyContext({attestationId:c,hash:i.hashMessage(JSON.stringify(w.formatJsonRpcRequest("wc_sessionRequest",y,E))),encryptedId:p,metadata:u.peer.metadata,transportType:g}),I={id:E,topic:n,params:y,verifyContext:_};await this.setPendingSessionRequest(I),g===h.TRANSPORT_TYPES.link_mode&&(t=u.peer.metadata.redirect)!=null&&t.universal&&this.client.core.addLinkModeSupportedApp((s=u.peer.metadata.redirect)==null?void 0:s.universal),(r=this.client.signConfig)!=null&&r.disableRequestQueue?this.emitSessionRequest(I):(this.addSessionRequestToSessionRequestQueue(I),this.processSessionRequestQueue())}catch(u){await this.sendError({id:E,topic:n,error:u}),this.client.logger.error(u)}}),l(this,"onSessionRequestResponse",(e,t)=>{const{id:s}=t,r=i.engineEvent("session_request",s);if(this.events.listenerCount(r)===0)throw new Error(`emitting ${r} without any listeners`);w.isJsonRpcResult(t)?this.events.emit(i.engineEvent("session_request",s),{result:t.result}):w.isJsonRpcError(t)&&this.events.emit(i.engineEvent("session_request",s),{error:t.error})}),l(this,"onSessionEventRequest",async(e,t)=>{const{id:s,params:r}=t;try{const n=`${e}_session_event_${r.event.name}`,a=i.MemoryStore.get(n);if(a&&this.isRequestOutOfSync(a,s)){this.client.logger.info(`Discarding out of sync request - ${s}`);return}this.isValidEmit(v({topic:e},r)),this.client.events.emit("session_event",{id:s,topic:e,params:r}),i.MemoryStore.set(n,s)}catch(n){await this.sendError({id:s,topic:e,error:n}),this.client.logger.error(n)}}),l(this,"onSessionAuthenticateResponse",(e,t)=>{const{id:s}=t;this.client.logger.trace({type:"method",method:"onSessionAuthenticateResponse",topic:e,payload:t}),w.isJsonRpcResult(t)?this.events.emit(i.engineEvent("session_request",s),{result:t.result}):w.isJsonRpcError(t)&&this.events.emit(i.engineEvent("session_request",s),{error:t.error})}),l(this,"onSessionAuthenticateRequest",async e=>{var t;const{topic:s,payload:r,attestation:n,encryptedId:a,transportType:c}=e;try{const{requester:p,authPayload:g,expiryTimestamp:E}=r.params,y=await this.getVerifyContext({attestationId:n,hash:i.hashMessage(JSON.stringify(r)),encryptedId:a,metadata:p.metadata,transportType:c}),u={requester:p,pairingTopic:s,id:r.id,authPayload:g,verifyContext:y,expiryTimestamp:E};await this.setAuthRequest(r.id,{request:u,pairingTopic:s,transportType:c}),c===h.TRANSPORT_TYPES.link_mode&&(t=p.metadata.redirect)!=null&&t.universal&&this.client.core.addLinkModeSupportedApp(p.metadata.redirect.universal),this.client.events.emit("session_authenticate",{topic:s,params:r.params,id:r.id,verifyContext:y})}catch(p){this.client.logger.error(p);const g=r.params.requester.publicKey,E=await this.client.core.crypto.generateKeyPair(),y=this.getAppLinkIfEnabled(r.params.requester.metadata,c),u={type:i.TYPE_1,receiverPublicKey:g,senderPublicKey:E};await this.sendError({id:r.id,topic:s,error:p,encodeOpts:u,rpcOpts:P.wc_sessionAuthenticate.autoReject,appLink:y})}}),l(this,"addSessionRequestToSessionRequestQueue",e=>{this.sessionRequestQueue.queue.push(e)}),l(this,"cleanupAfterResponse",e=>{this.deletePendingSessionRequest(e.response.id,{message:"fulfilled",code:0}),setTimeout(()=>{this.sessionRequestQueue.state=b.idle,this.processSessionRequestQueue()},T.toMiliseconds(this.requestQueueDelay))}),l(this,"cleanupPendingSentRequestsForTopic",({topic:e,error:t})=>{const s=this.client.core.history.pending;s.length>0&&s.filter(r=>r.topic===e&&r.request.method==="wc_sessionRequest").forEach(r=>{const n=r.request.id,a=i.engineEvent("session_request",n);if(this.events.listenerCount(a)===0)throw new Error(`emitting ${a} without any listeners`);this.events.emit(i.engineEvent("session_request",r.request.id),{error:t})})}),l(this,"processSessionRequestQueue",()=>{if(this.sessionRequestQueue.state===b.active){this.client.logger.info("session request queue is already active.");return}const e=this.sessionRequestQueue.queue[0];if(!e){this.client.logger.info("session request queue is empty.");return}try{this.sessionRequestQueue.state=b.active,this.emitSessionRequest(e)}catch(t){this.client.logger.error(t)}}),l(this,"emitSessionRequest",e=>{this.client.events.emit("session_request",e)}),l(this,"onPairingCreated",e=>{if(e.methods&&this.expectedPairingMethodMap.set(e.topic,e.methods),e.active)return;const t=this.client.proposal.getAll().find(s=>s.pairingTopic===e.topic);t&&this.onSessionProposeRequest({topic:e.topic,payload:w.formatJsonRpcRequest("wc_sessionPropose",{requiredNamespaces:t.requiredNamespaces,optionalNamespaces:t.optionalNamespaces,relays:t.relays,proposer:t.proposer,sessionProperties:t.sessionProperties},t.id)})}),l(this,"isValidConnect",async e=>{if(!i.isValidParams(e)){const{message:c}=i.getInternalError("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(e)}`);throw new Error(c)}const{pairingTopic:t,requiredNamespaces:s,optionalNamespaces:r,sessionProperties:n,relays:a}=e;if(i.isUndefined(t)||await this.isValidPairingTopic(t),!i.isValidRelays(a,!0)){const{message:c}=i.getInternalError("MISSING_OR_INVALID",`connect() relays: ${a}`);throw new Error(c)}!i.isUndefined(s)&&i.isValidObject(s)!==0&&this.validateNamespaces(s,"requiredNamespaces"),!i.isUndefined(r)&&i.isValidObject(r)!==0&&this.validateNamespaces(r,"optionalNamespaces"),i.isUndefined(n)||this.validateSessionProps(n,"sessionProperties")}),l(this,"validateNamespaces",(e,t)=>{const s=i.isValidRequiredNamespaces(e,"connect()",t);if(s)throw new Error(s.message)}),l(this,"isValidApprove",async e=>{if(!i.isValidParams(e))throw new Error(i.getInternalError("MISSING_OR_INVALID",`approve() params: ${e}`).message);const{id:t,namespaces:s,relayProtocol:r,sessionProperties:n}=e;this.checkRecentlyDeleted(t),await this.isValidProposalId(t);const a=this.client.proposal.get(t),c=i.isValidNamespaces(s,"approve()");if(c)throw new Error(c.message);const p=i.isConformingNamespaces(a.requiredNamespaces,s,"approve()");if(p)throw new Error(p.message);if(!i.isValidString(r,!0)){const{message:g}=i.getInternalError("MISSING_OR_INVALID",`approve() relayProtocol: ${r}`);throw new Error(g)}i.isUndefined(n)||this.validateSessionProps(n,"sessionProperties")}),l(this,"isValidReject",async e=>{if(!i.isValidParams(e)){const{message:r}=i.getInternalError("MISSING_OR_INVALID",`reject() params: ${e}`);throw new Error(r)}const{id:t,reason:s}=e;if(this.checkRecentlyDeleted(t),await this.isValidProposalId(t),!i.isValidErrorReason(s)){const{message:r}=i.getInternalError("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(s)}`);throw new Error(r)}}),l(this,"isValidSessionSettleRequest",e=>{if(!i.isValidParams(e)){const{message:p}=i.getInternalError("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${e}`);throw new Error(p)}const{relay:t,controller:s,namespaces:r,expiry:n}=e;if(!i.isValidRelay(t)){const{message:p}=i.getInternalError("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(p)}const a=i.isValidController(s,"onSessionSettleRequest()");if(a)throw new Error(a.message);const c=i.isValidNamespaces(r,"onSessionSettleRequest()");if(c)throw new Error(c.message);if(i.isExpired(n)){const{message:p}=i.getInternalError("EXPIRED","onSessionSettleRequest()");throw new Error(p)}}),l(this,"isValidUpdate",async e=>{if(!i.isValidParams(e)){const{message:c}=i.getInternalError("MISSING_OR_INVALID",`update() params: ${e}`);throw new Error(c)}const{topic:t,namespaces:s}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t);const r=this.client.session.get(t),n=i.isValidNamespaces(s,"update()");if(n)throw new Error(n.message);const a=i.isConformingNamespaces(r.requiredNamespaces,s,"update()");if(a)throw new Error(a.message)}),l(this,"isValidExtend",async e=>{if(!i.isValidParams(e)){const{message:s}=i.getInternalError("MISSING_OR_INVALID",`extend() params: ${e}`);throw new Error(s)}const{topic:t}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t)}),l(this,"isValidRequest",async e=>{if(!i.isValidParams(e)){const{message:c}=i.getInternalError("MISSING_OR_INVALID",`request() params: ${e}`);throw new Error(c)}const{topic:t,request:s,chainId:r,expiry:n}=e;this.checkRecentlyDeleted(t),await this.isValidSessionTopic(t);const{namespaces:a}=this.client.session.get(t);if(!i.isValidNamespacesChainId(a,r)){const{message:c}=i.getInternalError("MISSING_OR_INVALID",`request() chainId: ${r}`);throw new Error(c)}if(!i.isValidRequest(s)){const{message:c}=i.getInternalError("MISSING_OR_INVALID",`request() ${JSON.stringify(s)}`);throw new Error(c)}if(!i.isValidNamespacesRequest(a,r,s.method)){const{message:c}=i.getInternalError("MISSING_OR_INVALID",`request() method: ${s.method}`);throw new Error(c)}if(n&&!i.isValidRequestExpiry(n,B)){const{message:c}=i.getInternalError("MISSING_OR_INVALID",`request() expiry: ${n}. Expiry must be a number (in seconds) between ${B.min} and ${B.max}`);throw new Error(c)}}),l(this,"isValidRespond",async e=>{var t;if(!i.isValidParams(e)){const{message:n}=i.getInternalError("MISSING_OR_INVALID",`respond() params: ${e}`);throw new Error(n)}const{topic:s,response:r}=e;try{await this.isValidSessionTopic(s)}catch(n){throw(t=e?.response)!=null&&t.id&&this.cleanupAfterResponse(e),n}if(!i.isValidResponse(r)){const{message:n}=i.getInternalError("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(r)}`);throw new Error(n)}}),l(this,"isValidPing",async e=>{if(!i.isValidParams(e)){const{message:s}=i.getInternalError("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(s)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)}),l(this,"isValidEmit",async e=>{if(!i.isValidParams(e)){const{message:a}=i.getInternalError("MISSING_OR_INVALID",`emit() params: ${e}`);throw new Error(a)}const{topic:t,event:s,chainId:r}=e;await this.isValidSessionTopic(t);const{namespaces:n}=this.client.session.get(t);if(!i.isValidNamespacesChainId(n,r)){const{message:a}=i.getInternalError("MISSING_OR_INVALID",`emit() chainId: ${r}`);throw new Error(a)}if(!i.isValidEvent(s)){const{message:a}=i.getInternalError("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(s)}`);throw new Error(a)}if(!i.isValidNamespacesEvent(n,r,s.name)){const{message:a}=i.getInternalError("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(s)}`);throw new Error(a)}}),l(this,"isValidDisconnect",async e=>{if(!i.isValidParams(e)){const{message:s}=i.getInternalError("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(s)}const{topic:t}=e;await this.isValidSessionOrPairingTopic(t)}),l(this,"isValidAuthenticate",e=>{const{chains:t,uri:s,domain:r,nonce:n}=e;if(!Array.isArray(t)||t.length===0)throw new Error("chains is required and must be a non-empty array");if(!i.isValidString(s,!1))throw new Error("uri is required parameter");if(!i.isValidString(r,!1))throw new Error("domain is required parameter");if(!i.isValidString(n,!1))throw new Error("nonce is required parameter");if([...new Set(t.map(c=>i.parseChainId(c).namespace))].length>1)throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");const{namespace:a}=i.parseChainId(t[0]);if(a!=="eip155")throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.")}),l(this,"getVerifyContext",async e=>{const{attestationId:t,hash:s,encryptedId:r,metadata:n,transportType:a}=e,c={verified:{verifyUrl:n.verifyUrl||h.VERIFY_SERVER,validation:"UNKNOWN",origin:n.url||""}};try{if(a===h.TRANSPORT_TYPES.link_mode){const g=this.getAppLinkIfEnabled(n,a);return c.verified.validation=g&&new URL(g).origin===new URL(n.url).origin?"VALID":"INVALID",c}const p=await this.client.core.verify.resolve({attestationId:t,hash:s,encryptedId:r,verifyUrl:n.verifyUrl});p&&(c.verified.origin=p.origin,c.verified.isScam=p.isScam,c.verified.validation=p.origin===new URL(n.url).origin?"VALID":"INVALID")}catch(p){this.client.logger.warn(p)}return this.client.logger.debug(`Verify context: ${JSON.stringify(c)}`),c}),l(this,"validateSessionProps",(e,t)=>{Object.values(e).forEach(s=>{if(!i.isValidString(s,!1)){const{message:r}=i.getInternalError("MISSING_OR_INVALID",`${t} must be in Record<string, string> format. Received: ${JSON.stringify(s)}`);throw new Error(r)}})}),l(this,"getPendingAuthRequest",e=>{const t=this.client.auth.requests.get(e);return typeof t=="object"?t:void 0}),l(this,"addToRecentlyDeleted",(e,t)=>{if(this.recentlyDeletedMap.set(e,t),this.recentlyDeletedMap.size>=this.recentlyDeletedLimit){let s=0;const r=this.recentlyDeletedLimit/2;for(const n of this.recentlyDeletedMap.keys()){if(s++>=r)break;this.recentlyDeletedMap.delete(n)}}}),l(this,"checkRecentlyDeleted",e=>{const t=this.recentlyDeletedMap.get(e);if(t){const{message:s}=i.getInternalError("MISSING_OR_INVALID",`Record was recently deleted - ${t}: ${e}`);throw new Error(s)}}),l(this,"isLinkModeEnabled",(e,t)=>{var s,r,n,a,c,p,g,E,y;return!e||t!==h.TRANSPORT_TYPES.link_mode?!1:((r=(s=this.client.metadata)==null?void 0:s.redirect)==null?void 0:r.linkMode)===!0&&((a=(n=this.client.metadata)==null?void 0:n.redirect)==null?void 0:a.universal)!==void 0&&((p=(c=this.client.metadata)==null?void 0:c.redirect)==null?void 0:p.universal)!==""&&((g=e?.redirect)==null?void 0:g.universal)!==void 0&&((E=e?.redirect)==null?void 0:E.universal)!==""&&((y=e?.redirect)==null?void 0:y.linkMode)===!0&&this.client.core.linkModeSupportedApps.includes(e.redirect.universal)&&typeof(global==null?void 0:global.Linking)<"u"}),l(this,"getAppLinkIfEnabled",(e,t)=>{var s;return this.isLinkModeEnabled(e,t)?(s=e?.redirect)==null?void 0:s.universal:void 0}),l(this,"handleLinkModeMessage",({url:e})=>{if(!e||!e.includes("wc_ev")||!e.includes("topic"))return;const t=i.getSearchParamFromURL(e,"topic")||"",s=decodeURIComponent(i.getSearchParamFromURL(e,"wc_ev")||""),r=this.client.session.keys.includes(t);r&&this.client.session.update(t,{transportType:h.TRANSPORT_TYPES.link_mode}),this.client.core.dispatchEnvelope({topic:t,message:s,sessionExists:r})}),l(this,"registerLinkModeListeners",async()=>{var e;if(i.isTestRun()||i.isReactNative()&&(e=this.client.metadata.redirect)!=null&&e.linkMode){const t=global==null?void 0:global.Linking;if(typeof t<"u"){t.addEventListener("url",this.handleLinkModeMessage,this.client.name);const s=await t.getInitialURL();s&&setTimeout(()=>{this.handleLinkModeMessage({url:s})},50)}}}),l(this,"shouldSetTVF",(e,t)=>{if(!t||e!=="wc_sessionRequest")return!1;const{request:s}=t;return Object.keys(pe).includes(s.method)}),l(this,"getTVFParams",(e,t,s)=>{var r,n;try{const a=t.request.method,c=this.extractTxHashesFromResult(a,s);return V(v({correlationId:e,rpcMethods:[a],chainId:t.chainId},this.isValidContractData(t.request.params)&&{contractAddresses:[(n=(r=t.request.params)==null?void 0:r[0])==null?void 0:n.to]}),{txHashes:c})}catch(a){this.client.logger.warn("Error getting TVF params",a)}return{}}),l(this,"isValidContractData",e=>{var t;if(!e)return!1;try{const s=e?.data||((t=e?.[0])==null?void 0:t.data);if(!s.startsWith("0x"))return!1;const r=s.slice(2);return/^[0-9a-fA-F]*$/.test(r)?r.length%2===0:!1}catch{}return!1}),l(this,"extractTxHashesFromResult",(e,t)=>{try{const s=pe[e];if(typeof t=="string")return[t];const r=t[s.key];if(i.isValidArray(r))return r;if(typeof r=="string")return[r]}catch(s){this.client.logger.warn("Error extracting tx hashes from result",s)}return[]})}isInitialized(){if(!this.initialized){const{message:o}=i.getInternalError("NOT_INITIALIZED",this.name);throw new Error(o)}}async confirmOnlineStateOrThrow(){await this.client.core.relayer.confirmOnlineStateOrThrow()}registerRelayerEvents(){this.client.core.relayer.on(h.RELAYER_EVENTS.message,o=>{!this.initialized||this.relayMessageCache.length>0?this.relayMessageCache.push(o):this.onRelayMessage(o)})}async onRelayMessage(o){const{topic:e,message:t,attestation:s,transportType:r}=o,{publicKey:n}=this.client.auth.authKeys.keys.includes(Y)?this.client.auth.authKeys.get(Y):{responseTopic:void 0,publicKey:void 0},a=await this.client.core.crypto.decode(e,t,{receiverPublicKey:n,encoding:r===h.TRANSPORT_TYPES.link_mode?i.BASE64URL:i.BASE64});try{w.isJsonRpcRequest(a)?(this.client.core.history.set(e,a),this.onRelayEventRequest({topic:e,payload:a,attestation:s,transportType:r,encryptedId:i.hashMessage(t)})):w.isJsonRpcResponse(a)?(await this.client.core.history.resolve(a),await this.onRelayEventResponse({topic:e,payload:a,transportType:r}),this.client.core.history.delete(e,a.id)):this.onRelayEventUnknownPayload({topic:e,payload:a,transportType:r})}catch(c){this.client.logger.error(c)}}registerExpirerEvents(){this.client.core.expirer.on(h.EXPIRER_EVENTS.expired,async o=>{const{topic:e,id:t}=i.parseExpirerTarget(o.target);if(t&&this.client.pendingRequest.keys.includes(t))return await this.deletePendingSessionRequest(t,i.getInternalError("EXPIRED"),!0);if(t&&this.client.auth.requests.keys.includes(t))return await this.deletePendingAuthRequest(t,i.getInternalError("EXPIRED"),!0);e?this.client.session.keys.includes(e)&&(await this.deleteSession({topic:e,expirerHasDeleted:!0}),this.client.events.emit("session_expire",{topic:e})):t&&(await this.deleteProposal(t,!0),this.client.events.emit("proposal_expire",{id:t}))})}registerPairingEvents(){this.client.core.pairing.events.on(h.PAIRING_EVENTS.create,o=>this.onPairingCreated(o)),this.client.core.pairing.events.on(h.PAIRING_EVENTS.delete,o=>{this.addToRecentlyDeleted(o.topic,"pairing")})}isValidPairingTopic(o){if(!i.isValidString(o,!1)){const{message:e}=i.getInternalError("MISSING_OR_INVALID",`pairing topic should be a string: ${o}`);throw new Error(e)}if(!this.client.core.pairing.pairings.keys.includes(o)){const{message:e}=i.getInternalError("NO_MATCHING_KEY",`pairing topic doesn't exist: ${o}`);throw new Error(e)}if(i.isExpired(this.client.core.pairing.pairings.get(o).expiry)){const{message:e}=i.getInternalError("EXPIRED",`pairing topic: ${o}`);throw new Error(e)}}async isValidSessionTopic(o){if(!i.isValidString(o,!1)){const{message:e}=i.getInternalError("MISSING_OR_INVALID",`session topic should be a string: ${o}`);throw new Error(e)}if(this.checkRecentlyDeleted(o),!this.client.session.keys.includes(o)){const{message:e}=i.getInternalError("NO_MATCHING_KEY",`session topic doesn't exist: ${o}`);throw new Error(e)}if(i.isExpired(this.client.session.get(o).expiry)){await this.deleteSession({topic:o});const{message:e}=i.getInternalError("EXPIRED",`session topic: ${o}`);throw new Error(e)}if(!this.client.core.crypto.keychain.has(o)){const{message:e}=i.getInternalError("MISSING_OR_INVALID",`session topic does not exist in keychain: ${o}`);throw await this.deleteSession({topic:o}),new Error(e)}}async isValidSessionOrPairingTopic(o){if(this.checkRecentlyDeleted(o),this.client.session.keys.includes(o))await this.isValidSessionTopic(o);else if(this.client.core.pairing.pairings.keys.includes(o))this.isValidPairingTopic(o);else if(i.isValidString(o,!1)){const{message:e}=i.getInternalError("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${o}`);throw new Error(e)}else{const{message:e}=i.getInternalError("MISSING_OR_INVALID",`session or pairing topic should be a string: ${o}`);throw new Error(e)}}async isValidProposalId(o){if(!i.isValidId(o)){const{message:e}=i.getInternalError("MISSING_OR_INVALID",`proposal id should be a number: ${o}`);throw new Error(e)}if(!this.client.proposal.keys.includes(o)){const{message:e}=i.getInternalError("NO_MATCHING_KEY",`proposal id doesn't exist: ${o}`);throw new Error(e)}if(i.isExpired(this.client.proposal.get(o).expiryTimestamp)){await this.deleteProposal(o);const{message:e}=i.getInternalError("EXPIRED",`proposal id: ${o}`);throw new Error(e)}}}class We extends h.Store{constructor(o,e){super(o,e,Re,X),this.core=o,this.logger=e}}class Le extends h.Store{constructor(o,e){super(o,e,Ie,X),this.core=o,this.logger=e}}class Ze extends h.Store{constructor(o,e){super(o,e,ve,X,t=>t.id),this.core=o,this.logger=e}}class et extends h.Store{constructor(o,e){super(o,e,qe,G,()=>Y),this.core=o,this.logger=e}}class tt extends h.Store{constructor(o,e){super(o,e,Ae,G),this.core=o,this.logger=e}}class st extends h.Store{constructor(o,e){super(o,e,Ce,G,t=>t.id),this.core=o,this.logger=e}}var it=Object.defineProperty,rt=(m,o,e)=>o in m?it(m,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):m[o]=e,de=(m,o,e)=>rt(m,typeof o!="symbol"?o+"":o,e);class nt{constructor(o,e){this.core=o,this.logger=e,de(this,"authKeys"),de(this,"pairingTopics"),de(this,"requests"),this.authKeys=new et(this.core,this.logger),this.pairingTopics=new tt(this.core,this.logger),this.requests=new st(this.core,this.logger)}async init(){await this.authKeys.init(),await this.pairingTopics.init(),await this.requests.init()}}var ot=Object.defineProperty,at=(m,o,e)=>o in m?ot(m,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):m[o]=e,R=(m,o,e)=>at(m,typeof o!="symbol"?o+"":o,e);class W extends Se.ISignClient{constructor(o){super(o),R(this,"protocol",oe),R(this,"version",ae),R(this,"name",z.name),R(this,"metadata"),R(this,"core"),R(this,"logger"),R(this,"events",new we.EventEmitter),R(this,"engine"),R(this,"session"),R(this,"proposal"),R(this,"pendingRequest"),R(this,"auth"),R(this,"signConfig"),R(this,"on",(t,s)=>this.events.on(t,s)),R(this,"once",(t,s)=>this.events.once(t,s)),R(this,"off",(t,s)=>this.events.off(t,s)),R(this,"removeListener",(t,s)=>this.events.removeListener(t,s)),R(this,"removeAllListeners",t=>this.events.removeAllListeners(t)),R(this,"connect",async t=>{try{return await this.engine.connect(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"pair",async t=>{try{return await this.engine.pair(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"approve",async t=>{try{return await this.engine.approve(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"reject",async t=>{try{return await this.engine.reject(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"update",async t=>{try{return await this.engine.update(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"extend",async t=>{try{return await this.engine.extend(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"request",async t=>{try{return await this.engine.request(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"respond",async t=>{try{return await this.engine.respond(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"ping",async t=>{try{return await this.engine.ping(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"emit",async t=>{try{return await this.engine.emit(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"disconnect",async t=>{try{return await this.engine.disconnect(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"find",t=>{try{return this.engine.find(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"getPendingSessionRequests",()=>{try{return this.engine.getPendingSessionRequests()}catch(t){throw this.logger.error(t.message),t}}),R(this,"authenticate",async(t,s)=>{try{return await this.engine.authenticate(t,s)}catch(r){throw this.logger.error(r.message),r}}),R(this,"formatAuthMessage",t=>{try{return this.engine.formatAuthMessage(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"approveSessionAuthenticate",async t=>{try{return await this.engine.approveSessionAuthenticate(t)}catch(s){throw this.logger.error(s.message),s}}),R(this,"rejectSessionAuthenticate",async t=>{try{return await this.engine.rejectSessionAuthenticate(t)}catch(s){throw this.logger.error(s.message),s}}),this.name=o?.name||z.name,this.metadata=o?.metadata||i.getAppMetadata(),this.signConfig=o?.signConfig;const e=typeof o?.logger<"u"&&typeof o?.logger!="string"?o.logger:J.pino(J.getDefaultLoggerOptions({level:o?.logger||z.logger}));this.core=o?.core||new h.Core(o),this.logger=J.generateChildLogger(e,this.name),this.session=new Le(this.core,this.logger),this.proposal=new We(this.core,this.logger),this.pendingRequest=new Ze(this.core,this.logger),this.engine=new Be(this),this.auth=new nt(this.core,this.logger)}static async init(o){const e=new W(o);return await e.initialize(),e}get context(){return J.getLoggerContext(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.auth.init(),await this.engine.init(),this.logger.info("SignClient Initialization Success"),setTimeout(()=>{this.engine.processRelayMessageCache()},T.toMiliseconds(T.ONE_SECOND))}catch(o){throw this.logger.info("SignClient Initialization Failure"),this.logger.error(o.message),o}}}const ct=Le,lt=W;exports.AUTH_CONTEXT=Pe,exports.AUTH_KEYS_CONTEXT=qe,exports.AUTH_PAIRING_TOPIC_CONTEXT=Ae,exports.AUTH_PROTOCOL=Oe,exports.AUTH_PUBLIC_KEY_NAME=Y,exports.AUTH_REQUEST_CONTEXT=Ce,exports.AUTH_STORAGE_PREFIX=G,exports.AUTH_VERSION=He,exports.ENGINE_CONTEXT=Ne,exports.ENGINE_QUEUE_STATES=b,exports.ENGINE_RPC_OPTS=P,exports.HISTORY_CONTEXT=Ke,exports.HISTORY_EVENTS=Fe,exports.HISTORY_STORAGE_VERSION=Ge,exports.METHODS_TO_VERIFY=fe,exports.PROPOSAL_CONTEXT=Re,exports.PROPOSAL_EXPIRY=Ye,exports.PROPOSAL_EXPIRY_MESSAGE=Te,exports.REQUEST_CONTEXT=ve,exports.SESSION_CONTEXT=Ie,exports.SESSION_EXPIRY=U,exports.SESSION_REQUEST_EXPIRY_BOUNDARIES=B,exports.SIGN_CLIENT_CONTEXT=ce,exports.SIGN_CLIENT_DEFAULT=z,exports.SIGN_CLIENT_EVENTS=ke,exports.SIGN_CLIENT_PROTOCOL=oe,exports.SIGN_CLIENT_STORAGE_OPTIONS=$e,exports.SIGN_CLIENT_STORAGE_PREFIX=X,exports.SIGN_CLIENT_VERSION=ae,exports.SessionStore=ct,exports.SignClient=lt,exports.TVF_METHODS=pe,exports.WALLETCONNECT_DEEPLINK_CHOICE=le,exports.default=W;
//# sourceMappingURL=index.cjs.js.map
